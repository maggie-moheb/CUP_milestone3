
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java.util.PriorityQueue;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\014\003\000\002\014\002\000\002\047\003" +
    "\000\002\047\003\000\002\055\003\000\002\056\003\000" +
    "\002\057\004\000\002\043\003\000\002\043\004\000\002" +
    "\046\003\000\002\046\005\000\002\045\004\000\002\045" +
    "\005\000\002\050\003\000\002\050\005\000\002\051\004" +
    "\000\002\051\005\000\002\064\003\000\002\052\005\000" +
    "\002\053\004\000\002\053\002\000\002\015\004\000\002" +
    "\015\004\000\002\006\004\000\002\006\003\000\002\007" +
    "\003\000\002\007\004\000\002\007\004\000\002\020\004" +
    "\000\002\020\006\000\002\020\005\000\002\022\005\000" +
    "\002\022\004\000\002\023\003\000\002\023\005\000\002" +
    "\023\006\000\002\024\003\000\002\024\005\000\002\025" +
    "\003\000\002\025\005\000\002\026\003\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\030\003\000\002\030\004" +
    "\000\002\030\004\000\002\030\004\000\002\021\004\000" +
    "\002\021\006\000\002\060\005\000\002\060\002\000\002" +
    "\061\005\000\002\061\004\000\002\061\006\000\002\062" +
    "\005\000\002\016\005\000\002\016\005\000\002\063\003" +
    "\000\002\042\004\000\002\044\003\000\002\017\006\000" +
    "\002\017\006\000\002\065\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\005\000\002\034" +
    "\003\000\002\034\003\000\002\037\003\000\002\037\003" +
    "\000\002\035\003\000\002\035\003\000\002\041\006\000" +
    "\002\040\004\000\002\027\003\000\002\027\004\000\002" +
    "\027\004\000\002\032\004\000\002\033\004\000\002\033" +
    "\005\000\002\033\010\000\002\036\006\000\002\066\006" +
    "\000\002\066\005\000\002\054\003\000\002\054\004\000" +
    "\002\054\004\000\002\054\004\000\002\054\004\000\002" +
    "\054\004\000\002\054\004\000\002\054\004\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\075\003\000\002\076\004\000\002\076\004\000" +
    "\002\077\005\000\002\100\004\000\002\100\004\000\002" +
    "\100\004\000\002\100\004\000\002\100\004\000\002\100" +
    "\004\000\002\100\003\000\002\072\005\000\002\072\007" +
    "\000\002\072\007\000\002\072\007\000\002\072\011\000" +
    "\002\072\011\000\002\073\003\000\002\101\006\000\002" +
    "\101\010\000\002\101\007\000\002\101\011\000\002\106" +
    "\004\000\002\106\002\000\002\107\005\000\002\110\004" +
    "\000\002\110\003\000\002\074\005\000\002\105\007\000" +
    "\002\104\003\000\002\102\003\000\002\103\003\000\002" +
    "\070\003\000\002\070\004\000\002\071\003\000\002\003" +
    "\004\000\002\010\003\000\002\004\005\000\002\004\002" +
    "\000\002\005\004\000\002\005\006\000\002\011\005\000" +
    "\002\011\002\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\004\011\006\001\002\000\004\002\u011f\001" +
    "\002\000\016\002\ufffd\006\ufffd\013\ufffd\017\ufffd\021\ufffd" +
    "\032\011\001\002\000\004\052\010\001\002\000\016\002" +
    "\uff70\006\uff70\013\uff70\017\uff70\021\uff70\032\uff70\001\002" +
    "\000\022\002\uff6f\006\uff6f\013\uff6f\017\uff6f\021\uff6f\032" +
    "\uff6f\034\uff6f\054\uff6f\001\002\000\060\002\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\012\ufffe\013\ufffe\014\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\034\ufffe\041\ufffe\045\ufffe\052\ufffe\054" +
    "\ufffe\055\ufffe\001\002\000\014\002\uff6d\006\uff6d\013\uff6d" +
    "\017\013\021\uff6d\001\002\000\012\026\u0116\034\u0117\052" +
    "\010\054\u0115\001\002\000\016\002\ufffd\006\ufffd\013\ufffd" +
    "\017\ufffd\021\ufffd\032\011\001\002\000\012\002\uffff\006" +
    "\017\013\027\021\024\001\002\000\004\032\u010f\001\002" +
    "\000\006\026\167\052\u0107\001\002\000\012\002\uffe5\006" +
    "\uffe5\013\uffe5\021\uffe5\001\002\000\012\002\uffe6\006\017" +
    "\013\027\021\024\001\002\000\014\002\ufffd\006\ufffd\013" +
    "\ufffd\021\ufffd\032\011\001\002\000\014\002\ufffd\006\ufffd" +
    "\013\ufffd\021\ufffd\032\011\001\002\000\006\026\367\052" +
    "\366\001\002\000\004\002\000\001\002\000\004\032\365" +
    "\001\002\000\006\026\032\052\031\001\002\000\004\032" +
    "\uffe2\001\002\000\012\006\041\032\uffdd\037\044\052\046" +
    "\001\002\000\006\027\033\052\031\001\002\000\004\032" +
    "\uffe0\001\002\000\004\032\037\001\002\000\004\027\036" +
    "\001\002\000\004\032\uffe1\001\002\000\006\027\uffde\052" +
    "\031\001\002\000\004\027\uffdf\001\002\000\004\026\167" +
    "\001\002\000\012\027\ufffc\032\ufffc\033\ufffc\037\ufffc\001" +
    "\002\000\012\027\ufffb\032\ufffb\033\ufffb\037\ufffb\001\002" +
    "\000\024\006\057\025\062\026\061\034\063\041\054\045" +
    "\052\052\053\054\051\055\065\001\002\000\004\037\050" +
    "\001\002\000\012\027\ufffa\032\ufffa\033\ufffa\037\ufffa\001" +
    "\002\000\012\027\ufff9\032\ufff9\033\ufff9\037\ufff9\001\002" +
    "\000\024\006\057\025\062\026\061\034\063\041\054\045" +
    "\052\052\053\054\051\055\065\001\002\000\056\022\uffae" +
    "\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\037\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\053\uffae\001\002\000\024\006\057\025\062\026\061" +
    "\034\063\041\054\045\052\052\053\054\051\055\065\001" +
    "\002\000\056\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\030\uffad\032\uffad\033\uffad\034\uffad\035\uffad\037" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\050\uffad\051\uffad\053\uffad\001\002\000\024\006" +
    "\057\025\062\026\061\034\063\041\054\045\052\052\053" +
    "\054\051\055\065\001\002\000\034\022\112\023\121\024" +
    "\113\025\105\032\uffdb\041\117\042\120\043\110\044\107" +
    "\045\116\046\114\047\111\053\106\001\002\000\056\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\053\uffb3\001\002\000\004\026\167\001\002\000" +
    "\056\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\037\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\053\uffb1\001\002\000\024\006\057\025" +
    "\062\026\061\034\063\041\054\045\052\052\053\054\051" +
    "\055\065\001\002\000\024\006\057\025\062\026\061\034" +
    "\063\041\054\045\052\052\053\054\051\055\065\001\002" +
    "\000\006\026\146\052\010\001\002\000\056\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\037\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\053\uffb5\001\002\000\056\022\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\037\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\053\uffaf\001\002" +
    "\000\056\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\076\027" +
    "\uffc9\030\uffc9\032\uffc9\033\uffc9\034\077\035\uffc9\037\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\053\uffc9\001\002\000\056\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\037\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\053\uffb4\001\002\000\056\022\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\026\uffa9\027\uffa9\030\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\037\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\053\uffa9\001" +
    "\002\000\056\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\032\uffac\033\uffac\034\uffac\035\uffac\037" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\053\uffac\001\002\000\056\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\037\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\053\uffb0\001\002\000\052\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\027\uffd6\030\uffd6\032\uffd6\033\uffd6\035\uffd6" +
    "\037\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\053\uffd6\001\002\000\056" +
    "\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\037\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\053\uffa8\001\002\000\056\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\032\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\037\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\053" +
    "\uffa7\001\002\000\030\006\057\015\103\025\062\026\061" +
    "\027\101\034\063\041\054\045\052\052\053\054\051\055" +
    "\065\001\002\000\004\052\100\001\002\000\056\022\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\037\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\053\uffa6\001\002\000\056\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\037\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\053\uffa5\001" +
    "\002\000\004\027\143\001\002\000\006\006\041\052\046" +
    "\001\002\000\044\022\112\023\121\024\113\025\105\027" +
    "\uffd8\030\uffd8\032\uffd8\033\115\037\uffd8\041\117\042\120" +
    "\043\110\044\107\045\116\046\114\047\111\053\106\001" +
    "\002\000\024\006\057\025\062\026\061\034\063\041\054" +
    "\045\052\052\053\054\051\055\065\001\002\000\024\006" +
    "\057\025\062\026\061\034\063\041\054\045\052\052\053" +
    "\054\051\055\065\001\002\000\024\006\057\025\062\026" +
    "\061\034\063\041\054\045\052\052\053\054\051\055\065" +
    "\001\002\000\024\006\057\025\062\026\061\034\063\041" +
    "\054\045\052\052\053\054\051\055\065\001\002\000\024" +
    "\006\057\025\062\026\061\034\063\041\054\045\052\052" +
    "\053\054\051\055\065\001\002\000\024\006\057\025\062" +
    "\026\061\034\063\041\054\045\052\052\053\054\051\055" +
    "\065\001\002\000\024\006\057\025\062\026\061\034\063" +
    "\041\054\045\052\052\053\054\051\055\065\001\002\000" +
    "\024\006\057\025\062\026\061\034\063\041\054\045\052" +
    "\052\053\054\051\055\065\001\002\000\024\006\057\025" +
    "\062\026\061\034\063\041\054\045\052\052\053\054\051" +
    "\055\065\001\002\000\024\006\057\025\062\026\061\034" +
    "\063\041\054\045\052\052\053\054\051\055\065\001\002" +
    "\000\024\006\057\025\062\026\061\034\063\041\054\045" +
    "\052\052\053\054\051\055\065\001\002\000\024\006\057" +
    "\025\062\026\061\034\063\041\054\045\052\052\053\054" +
    "\051\055\065\001\002\000\024\006\057\025\062\026\061" +
    "\034\063\041\054\045\052\052\053\054\051\055\065\001" +
    "\002\000\052\022\uffd3\023\uffd3\024\113\025\105\027\uffd3" +
    "\030\uffd3\032\uffd3\033\uffd3\035\uffd3\037\uffd3\041\117\042" +
    "\120\043\110\044\107\045\116\046\114\047\111\050\uffd3" +
    "\051\uffd3\053\106\001\002\000\052\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd\035\uffcd" +
    "\037\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\116\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\053\uffcd\001\002\000\052" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\027\uffd0\030\uffd0\032" +
    "\uffd0\033\uffd0\035\uffd0\037\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\116\046\uffd0\047\uffd0\050\uffd0\051\uffd0\053" +
    "\uffd0\001\002\000\052\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\027\uffca\030\uffca\032\uffca\033\uffca\035\uffca\037\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\053\uffca\001\002\000\026\024\uffd7\025" +
    "\uffd7\027\uffd7\030\uffd7\032\uffd7\037\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\001\002\000\052\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\027\uffcb\030\uffcb\032\uffcb\033\uffcb\035\uffcb" +
    "\037\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\116\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\053\uffcb\001\002\000\052" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2\032" +
    "\uffd2\033\uffd2\035\uffd2\037\uffd2\041\117\042\120\043\110" +
    "\044\107\045\116\046\114\047\111\050\uffd2\051\uffd2\053" +
    "\uffd2\001\002\000\052\022\uffd4\023\uffd4\024\113\025\105" +
    "\027\uffd4\030\uffd4\032\uffd4\033\uffd4\035\uffd4\037\uffd4\041" +
    "\117\042\120\043\110\044\107\045\116\046\114\047\111" +
    "\050\uffd4\051\uffd4\053\106\001\002\000\052\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\027\uffce\030\uffce\032\uffce\033\uffce" +
    "\035\uffce\037\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\116\046\uffce\047\uffce\050\uffce\051\uffce\053\uffce\001\002" +
    "\000\052\022\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\030" +
    "\uffcc\032\uffcc\033\uffcc\035\uffcc\037\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\045\116\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\053\uffcc\001\002\000\052\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\027\uffcf\030\uffcf\032\uffcf\033\uffcf\035\uffcf\037" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\116\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\053\uffcf\001\002\000\052\022" +
    "\uffd5\023\uffd5\024\113\025\105\027\uffd5\030\uffd5\032\uffd5" +
    "\033\uffd5\035\uffd5\037\uffd5\041\117\042\120\043\110\044" +
    "\107\045\116\046\114\047\111\050\uffd5\051\uffd5\053\uffd5" +
    "\001\002\000\052\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027" +
    "\uffd1\030\uffd1\032\uffd1\033\uffd1\035\uffd1\037\uffd1\041\117" +
    "\042\120\043\110\044\107\045\116\046\114\047\111\050" +
    "\uffd1\051\uffd1\053\uffd1\001\002\000\004\033\140\001\002" +
    "\000\024\006\057\025\062\026\061\034\063\041\054\045" +
    "\052\052\053\054\051\055\065\001\002\000\004\027\142" +
    "\001\002\000\056\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\037\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\053\uffa3\001\002\000\056" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\037\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\053\uffa4\001\002\000\004\034\157\001\002" +
    "\000\004\034\154\001\002\000\006\041\150\052\046\001" +
    "\002\000\004\027\153\001\002\000\004\052\046\001\002" +
    "\000\004\027\152\001\002\000\004\034\uffa1\001\002\000" +
    "\004\034\uffa0\001\002\000\004\052\156\001\002\000\056" +
    "\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\037\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\053\uffa2\001\002\000\056\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\032\uffed\033" +
    "\uffed\034\uffed\035\uffed\037\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\053" +
    "\uffed\001\002\000\004\052\160\001\002\000\056\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\032" +
    "\uffab\033\uffab\034\uffab\035\uffab\037\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\053\uffab\001\002\000\052\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\027\uffc8\030\uffc8\032\uffc8\033\uffc8\035\uffc8\037" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\053\uffc8\001\002\000\034\022" +
    "\112\023\121\024\113\025\105\027\163\041\117\042\120" +
    "\043\110\044\107\045\116\046\114\047\111\053\106\001" +
    "\002\000\056\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\037" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\053\uffb2\001\002\000\056\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\035\uffaa\037\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\053\uffaa\001\002\000\004\030\213\001\002\000" +
    "\026\002\ufff7\006\ufff7\013\ufff7\021\ufff7\026\207\027\ufff7" +
    "\030\ufff7\032\ufff7\033\ufff7\037\ufff7\001\002\000\006\027" +
    "\171\052\173\001\002\000\006\027\ufff1\033\203\001\002" +
    "\000\030\002\ufff3\006\ufff3\013\ufff3\021\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\032\ufff3\033\ufff3\037\ufff3\052\ufff3\001\002" +
    "\000\004\027\202\001\002\000\014\006\uffda\033\200\036" +
    "\uffda\040\uffda\052\uffda\001\002\000\010\006\041\040\176" +
    "\052\046\001\002\000\006\027\uffef\033\uffef\001\002\000" +
    "\006\006\041\052\046\001\002\000\006\027\uffee\033\uffee" +
    "\001\002\000\004\052\173\001\002\000\012\006\uffd9\036" +
    "\uffd9\040\uffd9\052\uffd9\001\002\000\030\002\ufff2\006\ufff2" +
    "\013\ufff2\021\ufff2\026\ufff2\027\ufff2\030\ufff2\032\ufff2\033" +
    "\ufff2\037\ufff2\052\ufff2\001\002\000\004\052\173\001\002" +
    "\000\004\027\ufff0\001\002\000\024\002\ufff6\006\ufff6\013" +
    "\ufff6\021\ufff6\027\ufff6\030\ufff6\032\ufff6\033\ufff6\037\ufff6" +
    "\001\002\000\024\002\ufff5\006\ufff5\013\ufff5\021\ufff5\027" +
    "\ufff5\030\ufff5\032\ufff5\033\ufff5\037\ufff5\001\002\000\010" +
    "\006\041\027\171\052\211\001\002\000\004\027\212\001" +
    "\002\000\014\006\uffda\027\ufffa\033\200\040\uffda\052\uffda" +
    "\001\002\000\024\002\ufff4\006\ufff4\013\ufff4\021\ufff4\027" +
    "\ufff4\030\ufff4\032\ufff4\033\ufff4\037\ufff4\001\002\000\046" +
    "\004\235\006\057\012\240\013\027\014\226\016\222\020" +
    "\232\021\024\025\062\026\061\030\213\031\uffea\034\063" +
    "\041\054\045\052\052\245\054\051\055\065\001\002\000" +
    "\066\002\uffba\006\uffba\013\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\037\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\053" +
    "\uffba\001\002\000\066\002\uffb9\006\uffb9\013\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\053\uffb9\001\002\000\054\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\020" +
    "\ufffd\021\ufffd\025\ufffd\026\ufffd\030\ufffd\031\ufffd\032\011" +
    "\034\ufffd\041\ufffd\045\ufffd\052\ufffd\054\ufffd\055\ufffd\001" +
    "\002\000\006\030\uff97\032\uff97\001\002\000\054\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\012\ufffd\013\ufffd\014\ufffd\016" +
    "\ufffd\020\ufffd\021\ufffd\025\ufffd\026\ufffd\030\ufffd\031\ufffd" +
    "\032\011\034\ufffd\041\ufffd\045\ufffd\052\ufffd\054\ufffd\055" +
    "\ufffd\001\002\000\054\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\016\ufffd\020\ufffd\021\ufffd\025" +
    "\ufffd\026\ufffd\030\ufffd\031\ufffd\032\011\034\ufffd\041\ufffd" +
    "\045\ufffd\052\ufffd\054\ufffd\055\ufffd\001\002\000\024\006" +
    "\057\025\062\026\061\034\063\041\054\045\052\052\245" +
    "\054\051\055\065\001\002\000\004\032\343\001\002\000" +
    "\006\030\uff95\032\uff95\001\002\000\004\036\341\001\002" +
    "\000\024\006\057\025\062\026\061\034\063\041\054\045" +
    "\052\052\245\054\051\055\065\001\002\000\006\030\uff96" +
    "\032\uff96\001\002\000\046\022\112\023\121\024\113\025" +
    "\105\030\uff93\032\uff93\033\115\037\uffd8\041\117\042\120" +
    "\043\110\044\107\045\116\046\114\047\111\050\252\051" +
    "\254\053\106\001\002\000\052\004\235\005\uffea\006\057" +
    "\007\uffea\012\240\013\027\014\226\016\222\020\232\021" +
    "\024\025\062\026\061\030\213\031\uffea\034\063\041\054" +
    "\045\052\052\245\054\051\055\065\001\002\000\026\006" +
    "\057\025\062\026\061\032\uff73\034\063\041\054\045\052" +
    "\052\053\054\051\055\065\001\002\000\054\004\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd" +
    "\020\ufffd\021\ufffd\025\ufffd\026\ufffd\030\ufffd\031\ufffd\032" +
    "\011\034\ufffd\041\ufffd\045\ufffd\052\ufffd\054\ufffd\055\ufffd" +
    "\001\002\000\004\032\321\001\002\000\004\032\uff71\001" +
    "\002\000\020\024\304\025\310\037\307\041\306\042\311" +
    "\043\302\044\305\001\002\000\004\032\301\001\002\000" +
    "\026\006\057\025\062\026\061\030\247\034\063\041\054" +
    "\045\052\052\245\054\051\055\065\001\002\000\004\031" +
    "\246\001\002\000\054\004\uff82\005\uff82\006\uff82\007\uff82" +
    "\012\uff82\013\uff82\014\uff82\016\uff82\020\uff82\021\uff82\025" +
    "\uff82\026\uff82\030\uff82\031\uff82\032\uff82\034\uff82\041\uff82" +
    "\045\uff82\052\uff82\054\uff82\055\uff82\001\002\000\052\004" +
    "\uff9f\005\uff9f\006\uff9f\007\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\016\uff9f\020\uff9f\021\uff9f\025\uff9f\026\uff9f\030\uff9f\031" +
    "\uff9f\034\uff9f\041\uff9f\045\uff9f\052\uff9f\054\uff9f\055\uff9f" +
    "\001\002\000\006\030\uff94\032\uff94\001\002\000\054\022" +
    "\uffad\023\uffad\024\uffad\025\uffad\026\uffad\030\uffad\032\uffad" +
    "\033\200\034\uffad\036\uffda\037\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\053\uffad\001\002\000\116\002\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec\016\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\037\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\001\002\000\010\005\256\007\261\031" +
    "\uff7c\001\002\000\004\032\267\001\002\000\046\022\112" +
    "\023\121\024\113\025\105\030\253\032\uff93\033\115\037" +
    "\uffd8\041\117\042\120\043\110\044\107\045\116\046\114" +
    "\047\111\050\252\051\254\053\106\001\002\000\006\030" +
    "\uff92\032\uff92\001\002\000\010\005\256\007\261\031\uff7c" +
    "\001\002\000\006\030\uff91\032\uff91\001\002\000\010\005" +
    "\256\007\261\031\uff7c\001\002\000\004\035\uff79\001\002" +
    "\000\004\035\264\001\002\000\004\031\263\001\002\000" +
    "\024\006\057\025\062\026\061\034\063\041\054\045\052" +
    "\052\053\054\051\055\065\001\002\000\034\022\112\023" +
    "\121\024\113\025\105\035\uff7a\041\117\042\120\043\110" +
    "\044\107\045\116\046\114\047\111\053\106\001\002\000" +
    "\054\004\uff7f\005\uff7f\006\uff7f\007\uff7f\012\uff7f\013\uff7f" +
    "\014\uff7f\016\uff7f\020\uff7f\021\uff7f\025\uff7f\026\uff7f\030" +
    "\uff7f\031\uff7f\032\uff7f\034\uff7f\041\uff7f\045\uff7f\052\uff7f" +
    "\054\uff7f\055\uff7f\001\002\000\052\004\235\005\uffea\006" +
    "\057\007\uffea\012\240\013\027\014\226\016\222\020\232" +
    "\021\024\025\062\026\061\030\213\031\uffea\034\063\041" +
    "\054\045\052\052\245\054\051\055\065\001\002\000\010" +
    "\005\uff7b\007\uff7b\031\uff7b\001\002\000\004\031\uff7d\001" +
    "\002\000\026\006\057\025\062\026\061\030\270\034\063" +
    "\041\054\045\052\052\053\054\051\055\065\001\002\000" +
    "\010\005\256\007\261\031\uff7c\001\002\000\034\022\112" +
    "\023\121\024\113\025\105\030\272\041\117\042\120\043" +
    "\110\044\107\045\116\046\114\047\111\053\106\001\002" +
    "\000\010\005\256\007\261\031\uff7c\001\002\000\004\031" +
    "\274\001\002\000\054\004\uff7e\005\uff7e\006\uff7e\007\uff7e" +
    "\012\uff7e\013\uff7e\014\uff7e\016\uff7e\020\uff7e\021\uff7e\025" +
    "\uff7e\026\uff7e\030\uff7e\031\uff7e\032\uff7e\034\uff7e\041\uff7e" +
    "\045\uff7e\052\uff7e\054\uff7e\055\uff7e\001\002\000\004\031" +
    "\276\001\002\000\054\004\uff80\005\uff80\006\uff80\007\uff80" +
    "\012\uff80\013\uff80\014\uff80\016\uff80\020\uff80\021\uff80\025" +
    "\uff80\026\uff80\030\uff80\031\uff80\032\uff80\034\uff80\041\uff80" +
    "\045\uff80\052\uff80\054\uff80\055\uff80\001\002\000\004\031" +
    "\300\001\002\000\054\004\uff81\005\uff81\006\uff81\007\uff81" +
    "\012\uff81\013\uff81\014\uff81\016\uff81\020\uff81\021\uff81\025" +
    "\uff81\026\uff81\030\uff81\031\uff81\032\uff81\034\uff81\041\uff81" +
    "\045\uff81\052\uff81\054\uff81\055\uff81\001\002\000\052\004" +
    "\uff9d\005\uff9d\006\uff9d\007\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\016\uff9d\020\uff9d\021\uff9d\025\uff9d\026\uff9d\030\uff9d\031" +
    "\uff9d\034\uff9d\041\uff9d\045\uff9d\052\uff9d\054\uff9d\055\uff9d" +
    "\001\002\000\004\037\320\001\002\000\024\006\057\025" +
    "\062\026\061\034\063\041\054\045\052\052\053\054\051" +
    "\055\065\001\002\000\004\037\316\001\002\000\004\037" +
    "\315\001\002\000\004\037\314\001\002\000\024\006\uff89" +
    "\025\uff89\026\uff89\034\uff89\041\uff89\045\uff89\052\uff89\054" +
    "\uff89\055\uff89\001\002\000\004\037\313\001\002\000\004" +
    "\037\312\001\002\000\024\006\uff8b\025\uff8b\026\uff8b\034" +
    "\uff8b\041\uff8b\045\uff8b\052\uff8b\054\uff8b\055\uff8b\001\002" +
    "\000\024\006\uff8e\025\uff8e\026\uff8e\034\uff8e\041\uff8e\045" +
    "\uff8e\052\uff8e\054\uff8e\055\uff8e\001\002\000\024\006\uff8d" +
    "\025\uff8d\026\uff8d\034\uff8d\041\uff8d\045\uff8d\052\uff8d\054" +
    "\uff8d\055\uff8d\001\002\000\024\006\uff8c\025\uff8c\026\uff8c" +
    "\034\uff8c\041\uff8c\045\uff8c\052\uff8c\054\uff8c\055\uff8c\001" +
    "\002\000\024\006\uff8f\025\uff8f\026\uff8f\034\uff8f\041\uff8f" +
    "\045\uff8f\052\uff8f\054\uff8f\055\uff8f\001\002\000\006\030" +
    "\uff90\032\uff90\001\002\000\024\006\uff8a\025\uff8a\026\uff8a" +
    "\034\uff8a\041\uff8a\045\uff8a\052\uff8a\054\uff8a\055\uff8a\001" +
    "\002\000\052\004\uff9c\005\uff9c\006\uff9c\007\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\016\uff9c\020\uff9c\021\uff9c\025\uff9c\026" +
    "\uff9c\030\uff9c\031\uff9c\034\uff9c\041\uff9c\045\uff9c\052\uff9c" +
    "\054\uff9c\055\uff9c\001\002\000\052\004\uff99\005\uff99\006" +
    "\uff99\007\uff99\012\uff99\013\uff99\014\uff99\016\uff99\020\uff99" +
    "\021\uff99\025\uff99\026\uff99\030\uff99\031\uff99\034\uff99\041" +
    "\uff99\045\uff99\052\uff99\054\uff99\055\uff99\001\002\000\004" +
    "\032\uff72\001\002\000\010\005\uffeb\007\uffeb\031\uffeb\001" +
    "\002\000\004\032\333\001\002\000\046\022\112\023\121" +
    "\024\113\025\105\030\213\032\uff93\033\115\037\uffd8\041" +
    "\117\042\120\043\110\044\107\045\116\046\114\047\111" +
    "\050\252\051\254\053\106\001\002\000\056\004\uff88\005" +
    "\uff88\006\uff88\007\uff88\010\330\012\uff88\013\uff88\014\uff88" +
    "\016\uff88\020\uff88\021\uff88\025\uff88\026\uff88\030\uff88\031" +
    "\uff88\032\uff88\034\uff88\041\uff88\045\uff88\052\uff88\054\uff88" +
    "\055\uff88\001\002\000\006\014\226\030\213\001\002\000" +
    "\054\004\uff86\005\uff86\006\uff86\007\uff86\012\uff86\013\uff86" +
    "\014\uff86\016\uff86\020\uff86\021\uff86\025\uff86\026\uff86\030" +
    "\uff86\031\uff86\032\uff86\034\uff86\041\uff86\045\uff86\052\uff86" +
    "\054\uff86\055\uff86\001\002\000\054\004\uff85\005\uff85\006" +
    "\uff85\007\uff85\012\uff85\013\uff85\014\uff85\016\uff85\020\uff85" +
    "\021\uff85\025\uff85\026\uff85\030\uff85\031\uff85\032\uff85\034" +
    "\uff85\041\uff85\045\uff85\052\uff85\054\uff85\055\uff85\001\002" +
    "\000\024\006\057\025\062\026\061\034\063\041\054\045" +
    "\052\052\053\054\051\055\065\001\002\000\034\022\112" +
    "\023\121\024\113\025\105\030\213\041\117\042\120\043" +
    "\110\044\107\045\116\046\114\047\111\053\106\001\002" +
    "\000\056\004\uff87\005\uff87\006\uff87\007\uff87\010\336\012" +
    "\uff87\013\uff87\014\uff87\016\uff87\020\uff87\021\uff87\025\uff87" +
    "\026\uff87\030\uff87\031\uff87\032\uff87\034\uff87\041\uff87\045" +
    "\uff87\052\uff87\054\uff87\055\uff87\001\002\000\006\014\226" +
    "\030\213\001\002\000\054\004\uff84\005\uff84\006\uff84\007" +
    "\uff84\012\uff84\013\uff84\014\uff84\016\uff84\020\uff84\021\uff84" +
    "\025\uff84\026\uff84\030\uff84\031\uff84\032\uff84\034\uff84\041" +
    "\uff84\045\uff84\052\uff84\054\uff84\055\uff84\001\002\000\054" +
    "\004\uff83\005\uff83\006\uff83\007\uff83\012\uff83\013\uff83\014" +
    "\uff83\016\uff83\020\uff83\021\uff83\025\uff83\026\uff83\030\uff83" +
    "\031\uff83\032\uff83\034\uff83\041\uff83\045\uff83\052\uff83\054" +
    "\uff83\055\uff83\001\002\000\024\006\057\025\062\026\061" +
    "\034\063\041\054\045\052\052\053\054\051\055\065\001" +
    "\002\000\036\022\112\023\121\024\113\025\105\030\uffbe" +
    "\032\uffbe\041\117\042\120\043\110\044\107\045\116\046" +
    "\114\047\111\053\106\001\002\000\052\004\uff9e\005\uff9e" +
    "\006\uff9e\007\uff9e\012\uff9e\013\uff9e\014\uff9e\016\uff9e\020" +
    "\uff9e\021\uff9e\025\uff9e\026\uff9e\030\uff9e\031\uff9e\034\uff9e" +
    "\041\uff9e\045\uff9e\052\uff9e\054\uff9e\055\uff9e\001\002\000" +
    "\004\032\uff75\001\002\000\004\032\350\001\002\000\004" +
    "\030\213\001\002\000\054\004\uff78\005\uff78\006\uff78\007" +
    "\uff78\012\uff78\013\uff78\014\uff78\016\uff78\020\uff78\021\uff78" +
    "\025\uff78\026\uff78\030\uff78\031\uff78\032\uff78\034\uff78\041" +
    "\uff78\045\uff78\052\uff78\054\uff78\055\uff78\001\002\000\024" +
    "\006\057\025\062\026\061\034\063\041\054\045\052\052" +
    "\053\054\051\055\065\001\002\000\034\022\112\023\121" +
    "\024\113\025\105\032\uff76\041\117\042\120\043\110\044" +
    "\107\045\116\046\114\047\111\053\106\001\002\000\004" +
    "\032\353\001\002\000\024\006\057\025\062\026\061\034" +
    "\063\041\054\045\052\052\245\054\051\055\065\001\002" +
    "\000\004\030\uff77\001\002\000\004\030\uff74\001\002\000" +
    "\052\004\uff9b\005\uff9b\006\uff9b\007\uff9b\012\uff9b\013\uff9b" +
    "\014\uff9b\016\uff9b\020\uff9b\021\uff9b\025\uff9b\026\uff9b\030" +
    "\uff9b\031\uff9b\034\uff9b\041\uff9b\045\uff9b\052\uff9b\054\uff9b" +
    "\055\uff9b\001\002\000\052\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\012\uff98\013\uff98\014\uff98\016\uff98\020\uff98\021\uff98" +
    "\025\uff98\026\uff98\030\uff98\031\uff98\034\uff98\041\uff98\045" +
    "\uff98\052\uff98\054\uff98\055\uff98\001\002\000\052\004\uff9a" +
    "\005\uff9a\006\uff9a\007\uff9a\012\uff9a\013\uff9a\014\uff9a\016" +
    "\uff9a\020\uff9a\021\uff9a\025\uff9a\026\uff9a\030\uff9a\031\uff9a" +
    "\034\uff9a\041\uff9a\045\uff9a\052\uff9a\054\uff9a\055\uff9a\001" +
    "\002\000\052\022\uffc6\023\uffc6\024\uffc6\025\uffc6\027\uffc6" +
    "\030\uffc6\032\uffc6\033\uffc6\035\uffc6\037\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\053\uffc6\001\002\000\052\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7\035\uffc7" +
    "\037\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\053\uffc7\001\002\000\034" +
    "\022\112\023\121\024\113\025\105\032\uffdc\041\117\042" +
    "\120\043\110\044\107\045\116\046\114\047\111\053\106" +
    "\001\002\000\012\027\ufff8\032\ufff8\033\ufff8\037\ufff8\001" +
    "\002\000\054\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\016\uffe9\020\uffe9\021\uffe9\025" +
    "\uffe9\026\uffe9\030\uffe9\031\uffe9\034\uffe9\041\uffe9\045\uffe9" +
    "\052\uffe9\054\uffe9\055\uffe9\001\002\000\010\006\041\037" +
    "\376\052\046\001\002\000\006\027\uffc2\052\366\001\002" +
    "\000\004\032\uffc5\001\002\000\004\027\375\001\002\000" +
    "\004\032\373\001\002\000\006\027\uffc2\052\366\001\002" +
    "\000\004\027\uffc3\001\002\000\004\032\uffc4\001\002\000" +
    "\024\006\057\025\062\026\061\034\063\041\054\045\052" +
    "\052\053\054\051\055\065\001\002\000\006\032\uffc0\037" +
    "\u0100\001\002\000\024\006\057\025\062\026\061\034\063" +
    "\041\054\045\052\052\053\054\051\055\065\001\002\000" +
    "\034\022\112\023\121\024\113\025\105\032\uffbf\041\117" +
    "\042\120\043\110\044\107\045\116\046\114\047\111\053" +
    "\106\001\002\000\034\022\112\023\121\024\113\025\105" +
    "\032\uffc1\041\117\042\120\043\110\044\107\045\116\046" +
    "\114\047\111\053\106\001\002\000\012\002\uffe3\006\uffe3" +
    "\013\uffe3\021\uffe3\001\002\000\012\002\uffe4\006\uffe4\013" +
    "\uffe4\021\uffe4\001\002\000\004\002\uffe7\001\002\000\004" +
    "\052\uffb6\001\002\000\004\026\uffbb\001\002\000\004\052" +
    "\156\001\002\000\004\026\167\001\002\000\014\002\uffbd" +
    "\006\uffbd\013\uffbd\021\uffbd\032\uffbd\001\002\000\016\002" +
    "\uffbc\006\uffbc\013\uffbc\021\uffbc\030\213\032\uffbc\001\002" +
    "\000\004\026\167\001\002\000\014\002\uffb8\006\uffb8\013" +
    "\uffb8\021\uffb8\032\uffb8\001\002\000\016\002\uffb7\006\uffb7" +
    "\013\uffb7\021\uffb7\030\213\032\uffb7\001\002\000\054\002" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\016\uffe8\020\uffe8\021\uffe8\025\uffe8\026\uffe8\030" +
    "\uffe8\031\uffe8\034\uffe8\041\uffe8\045\uffe8\052\uffe8\054\uffe8" +
    "\055\uffe8\001\002\000\014\002\uff6d\006\uff6d\013\uff6d\017" +
    "\013\021\uff6d\001\002\000\012\002\uff6e\006\uff6e\013\uff6e" +
    "\021\uff6e\001\002\000\004\054\u0115\001\002\000\026\002" +
    "\uff68\006\uff68\013\uff68\017\uff68\021\uff68\027\uff68\032\uff68" +
    "\034\uff68\052\uff68\054\uff68\001\002\000\016\002\uff6c\006" +
    "\uff6c\013\uff6c\017\uff6c\021\uff6c\032\uff6c\001\002\000\026" +
    "\002\uff65\006\uff65\013\uff65\017\uff65\021\uff65\027\uff65\032" +
    "\uff65\034\uff65\052\uff65\054\uff65\001\002\000\012\027\uff69" +
    "\034\u0117\052\010\054\u0115\001\002\000\004\054\u0115\001" +
    "\002\000\026\002\uff67\006\uff67\013\uff67\017\uff67\021\uff67" +
    "\027\uff67\032\uff67\034\uff67\052\uff67\054\uff67\001\002\000" +
    "\004\027\u011d\001\002\000\014\027\ufffd\032\011\034\ufffd" +
    "\052\ufffd\054\ufffd\001\002\000\012\027\uff69\034\u0117\052" +
    "\010\054\u0115\001\002\000\004\027\uff6a\001\002\000\016" +
    "\002\uff6b\006\uff6b\013\uff6b\017\uff6b\021\uff6b\032\uff6b\001" +
    "\002\000\026\002\uff66\006\uff66\013\uff66\017\uff66\021\uff66" +
    "\027\uff66\032\uff66\034\uff66\052\uff66\054\uff66\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\014\011\001\001\000\004\010\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\014\005\013\001\001\000\010\010\u0111\012\u0113" +
    "\013\u0112\001\001\000\004\014\u010f\001\001\000\020\006" +
    "\024\007\020\015\017\016\021\017\022\020\025\021\015" +
    "\001\001\000\002\001\001\000\010\045\u0105\063\u0108\065" +
    "\u0107\001\001\000\002\001\001\000\020\006\u0104\007\020" +
    "\015\017\016\021\017\022\020\025\021\015\001\001\000" +
    "\004\014\u0103\001\001\000\004\014\u0102\001\001\000\004" +
    "\061\367\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\027\001\001\000\002\001\001\000\012\047\044" +
    "\055\041\056\042\057\046\001\001\000\006\022\034\023" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\037\023\033\001" +
    "\001\000\002\001\001\000\006\043\363\045\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\026\362\027" +
    "\065\030\072\031\067\034\063\035\066\036\055\037\057" +
    "\040\071\041\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\026\054\027\065\030\072" +
    "\031\067\034\063\035\066\036\055\037\057\040\071\041" +
    "\070\001\001\000\002\001\001\000\024\027\065\030\361" +
    "\031\067\034\063\035\066\036\055\037\057\040\071\041" +
    "\070\001\001\000\002\001\001\000\024\027\065\030\360" +
    "\031\067\034\063\035\066\036\055\037\057\040\071\041" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\042\163\043\164\045\165\001\001\000\002\001\001\000" +
    "\026\026\161\027\065\030\072\031\067\034\063\035\066" +
    "\036\055\037\057\040\071\041\070\001\001\000\024\027" +
    "\065\030\160\031\067\034\063\035\066\036\055\037\057" +
    "\040\071\041\070\001\001\000\006\010\143\066\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\073" +
    "\033\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\025\101\026\103\027" +
    "\065\030\072\031\067\034\063\035\066\036\055\037\057" +
    "\040\071\041\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\047\136" +
    "\055\041\056\042\057\046\001\001\000\002\001\001\000" +
    "\026\026\135\027\065\030\072\031\067\034\063\035\066" +
    "\036\055\037\057\040\071\041\070\001\001\000\026\026" +
    "\134\027\065\030\072\031\067\034\063\035\066\036\055" +
    "\037\057\040\071\041\070\001\001\000\026\026\133\027" +
    "\065\030\072\031\067\034\063\035\066\036\055\037\057" +
    "\040\071\041\070\001\001\000\026\026\132\027\065\030" +
    "\072\031\067\034\063\035\066\036\055\037\057\040\071" +
    "\041\070\001\001\000\026\026\131\027\065\030\072\031" +
    "\067\034\063\035\066\036\055\037\057\040\071\041\070" +
    "\001\001\000\026\026\130\027\065\030\072\031\067\034" +
    "\063\035\066\036\055\037\057\040\071\041\070\001\001" +
    "\000\026\026\127\027\065\030\072\031\067\034\063\035" +
    "\066\036\055\037\057\040\071\041\070\001\001\000\026" +
    "\026\126\027\065\030\072\031\067\034\063\035\066\036" +
    "\055\037\057\040\071\041\070\001\001\000\030\025\125" +
    "\026\103\027\065\030\072\031\067\034\063\035\066\036" +
    "\055\037\057\040\071\041\070\001\001\000\026\026\124" +
    "\027\065\030\072\031\067\034\063\035\066\036\055\037" +
    "\057\040\071\041\070\001\001\000\026\026\123\027\065" +
    "\030\072\031\067\034\063\035\066\036\055\037\057\040" +
    "\071\041\070\001\001\000\026\026\122\027\065\030\072" +
    "\031\067\034\063\035\066\036\055\037\057\040\071\041" +
    "\070\001\001\000\026\026\121\027\065\030\072\031\067" +
    "\034\063\035\066\036\055\037\057\040\071\041\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\025\140\026\103\027\065" +
    "\030\072\031\067\034\063\035\066\036\055\037\057\040" +
    "\071\041\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\146\001\001\000\002\001\001\000\004\055\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\213\052\214\001\001\000\006\045\205\046" +
    "\204\001\001\000\010\024\173\050\171\051\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\047\174\055\041\056\042\057\046" +
    "\001\001\000\002\001\001\000\012\047\176\055\041\056" +
    "\042\057\046\001\001\000\002\001\001\000\004\024\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\173\050\203\051\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\024\173\047\207\050" +
    "\171\051\167\055\041\056\042\057\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\015" +
    "\242\020\025\021\015\024\224\025\235\026\227\027\065" +
    "\030\072\031\067\034\063\035\066\036\055\037\057\040" +
    "\071\041\070\052\220\053\240\054\230\062\243\067\222" +
    "\070\236\071\233\072\215\073\232\074\217\075\216\076" +
    "\226\077\223\101\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\357\001\001\000\002\001\001\000" +
    "\004\014\356\001\001\000\004\014\355\001\001\000\050" +
    "\024\224\025\235\026\227\027\065\030\072\031\067\034" +
    "\063\035\066\036\055\037\057\040\071\041\070\062\243" +
    "\067\343\075\216\076\226\077\223\102\344\105\345\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\024\224\025\235\026\325\027\065\030\072\031" +
    "\067\034\063\035\066\036\055\037\057\040\071\041\070" +
    "\062\243\067\324\075\216\076\226\077\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\015\242\020\025" +
    "\021\015\024\224\025\235\026\227\027\065\030\072\031" +
    "\067\034\063\035\066\036\055\037\057\040\071\041\070" +
    "\052\220\053\323\054\230\062\243\067\222\070\236\071" +
    "\233\072\215\073\232\074\217\075\216\076\226\077\223" +
    "\101\241\001\001\000\030\025\322\026\103\027\065\030" +
    "\072\031\067\034\063\035\066\036\055\037\057\040\071" +
    "\041\070\001\001\000\004\014\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\302\001\001\000\002" +
    "\001\001\000\044\024\224\025\235\026\250\027\065\030" +
    "\072\031\067\034\063\035\066\036\055\037\057\040\071" +
    "\041\070\062\243\067\247\075\216\076\226\077\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\106\276\107\254\110\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\106\257\107" +
    "\254\110\256\001\001\000\002\001\001\000\010\106\265" +
    "\107\254\110\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\026\261\027\065\030\072" +
    "\031\067\034\063\035\066\036\055\037\057\040\071\041" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\015\242\020\025\021\015\024\224\025\235\026\227\027" +
    "\065\030\072\031\067\034\063\035\066\036\055\037\057" +
    "\040\071\041\070\052\220\053\264\054\230\062\243\067" +
    "\222\070\236\071\233\072\215\073\232\074\217\075\216" +
    "\076\226\077\223\101\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\026\270\027\065\030\072\031\067" +
    "\034\063\035\066\036\055\037\057\040\071\041\070\001" +
    "\001\000\010\106\274\107\254\110\256\001\001\000\002" +
    "\001\001\000\010\106\272\107\254\110\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\025\316\026\103\027\065" +
    "\030\072\031\067\034\063\035\066\036\055\037\057\040" +
    "\071\041\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\326\001\001\000\002\001\001\000\006\052\331" +
    "\072\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\026\333\027\065\030\072\031\067\034\063\035\066" +
    "\036\055\037\057\040\071\041\070\001\001\000\004\052" +
    "\334\001\001\000\002\001\001\000\006\052\337\072\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\026" +
    "\341\027\065\030\072\031\067\034\063\035\066\036\055" +
    "\037\057\040\071\041\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\346\001\001\000\002\001\001\000\030\026\350\027" +
    "\065\030\072\031\067\034\063\035\066\036\055\037\057" +
    "\040\071\041\070\104\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\024\224\025\235\026\227\027\065" +
    "\030\072\031\067\034\063\035\066\036\055\037\057\040" +
    "\071\041\070\062\243\067\354\075\216\076\226\077\223" +
    "\103\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\047\376\055\041\056\042" +
    "\057\046\001\001\000\006\060\370\061\371\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\060\373\061\371\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\026\u0101\027\065\030\072\031\067\034\063" +
    "\035\066\036\055\037\057\040\071\041\070\001\001\000" +
    "\002\001\001\000\026\026\u0100\027\065\030\072\031\067" +
    "\034\063\035\066\036\055\037\057\040\071\041\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\u010b\001\001\000\010\042\u0109" +
    "\043\u010a\045\165\001\001\000\002\001\001\000\006\044" +
    "\213\052\214\001\001\000\010\042\u010c\043\u010d\045\165" +
    "\001\001\000\002\001\001\000\006\044\213\052\214\001" +
    "\001\000\002\001\001\000\006\004\u0110\005\013\001\001" +
    "\000\002\001\001\000\004\013\u011d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\u0111" +
    "\011\u0118\012\u0119\013\u0112\001\001\000\004\013\u0117\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\u011a" +
    "\001\001\000\012\010\u0111\011\u011b\012\u0119\013\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	String Z = "";
	 int variable_count = -1;
 	 int label_count = -1;
 	 PriorityQueue<String> operandQueue = new PriorityQueue<String>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sourceFile EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sourceFile ::= packageClause optionalSemiColon importDecls topLevelDecls 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String res = d.toString();
					if(res.charAt(0) == '\n') {
						res = res.substring(1);
					}
					RESULT = res.replace("\n\n", "\n");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sourceFile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sourceFile ::= packageClause optionalSemiColon importDecls 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String res = d.toString();
					if(res.charAt(0) == '\n') {
						res = res.substring(1);
					}
					RESULT = res.replace("\n\n", "\n");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sourceFile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // optionalSemiColon ::= SEMI_COLON 
            {
              Object RESULT =null;
		
							Z +="";
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSemiColon",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // optionalSemiColon ::= 
            {
              Object RESULT =null;
		
							Z +="";
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSemiColon",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= typeName 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= typeLit 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // typeName ::= IDENTIFIER 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeName",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // typeLit ::= functionType 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeLit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // functionType ::= FUNC signature 
            {
              Object RESULT =null;
			
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionType",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // signature ::= parameters 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // signature ::= parameters result 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // result ::= parameters 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // result ::= OPEN_PARAN type CLOSE_PARAN 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters ::= OPEN_PARAN CLOSE_PARAN 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameters ::= OPEN_PARAN parameterList CLOSE_PARAN 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameterList ::= parameterDecl 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameterList ::= parameterDecl COMMA parameterList 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parameterDecl ::= identifierList type 
            {
              Object RESULT =null;
		
						Z +="push_params: ";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDecl",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameterDecl ::= identifierList CDOTS type 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDecl",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // methodName ::= IDENTIFIER 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodName",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // block ::= OPEN_CURLY statementList CLOSE_CURLY 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				
				RESULT = l;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statementList ::= statement statementList 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = s+"\n"+s1;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statementList ::= 
            {
              Object RESULT =null;
		
						RESULT ="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration ::= constDecl SEMI_COLON 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration ::= varDecl SEMI_COLON 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = vd;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // topLevelDecls ::= topLevelDecl topLevelDecls 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = d1+""+d2;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // topLevelDecls ::= topLevelDecl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = d;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // topLevelDecl ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = d;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // topLevelDecl ::= functionDecl optionalSemiColon 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object osc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = fd;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // topLevelDecl ::= methodDecl optionalSemiColon 
            {
              Object RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object osc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = md;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // constDecl ::= CONST constSpec 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = c;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // constDecl ::= CONST OPEN_PARAN constSpecs CLOSE_PARAN 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constDecl ::= CONST OPEN_PARAN CLOSE_PARAN 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // constSpecs ::= constSpec SEMI_COLON constSpecs 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpecs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constSpecs ::= constSpec SEMI_COLON 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpecs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constSpec ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // constSpec ::= IDENTIFIER EQUAL expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i +" =" +e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // constSpec ::= IDENTIFIER type EQUAL expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i+" ="+e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // identifierList ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = i;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identifierList ::= IDENTIFIER COMMA identifierList 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = i + "," + i1;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expressionList ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						////System.out.println("expr_l " + e);
						operandQueue = new PriorityQueue<String>();
						RESULT = e;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressionList ::= expression COMMA expressionList 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = e+"\n"+e1;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= unaryExpr 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = u;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression REL_OP expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + ""+o+""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression OR_OP expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression AND_OP expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(temp.charAt(lstIdxEq -1) != '=') {
							foundEq = true;
							break;
						}
						temp = temp.substring(0, lstIdxEq-1);
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression ASTRISK expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression SLASH expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression PERCENT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression SHIFT_LEFT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression SHIFT_RIGHT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression AMBERSAND expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression EXCLAMATION expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unaryExpr ::= primaryExpr 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					//System.out.println("unaryExpr " + p);
					RESULT = p;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unaryExpr ::= MINUS unaryExpr 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = o+""+e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unaryExpr ::= EXCLAMATION unaryExpr 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = o+""+e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unaryExpr ::= ASTRISK unaryExpr 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = o+""+e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // varDecl ::= VAR varSpec 
            {
              Object RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = vs + "t" + variable_count;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // varDecl ::= VAR OPEN_PARAN varSpecs CLOSE_PARAN 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // varSpecs ::= varSpec SEMI_COLON varSpecs 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					RESULT = v;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpecs",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // varSpecs ::= 
            {
              Object RESULT =null;
		
					RESULT="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpecs",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // varSpec ::= IDENTIFIER EQUAL expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e + "\n" + i + " =";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // varSpec ::= IDENTIFIER type 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i+""+t;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // varSpec ::= IDENTIFIER type EQUAL expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i+""+t+""+e;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // shortVarDecl ::= identifierList COLON_EQUAL expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
				String fstoperand = e1.toString();
				int fstCutfst = 0;
				int scndCutfst = e1.toString().length();
				int lstIdxEq = 0;
				boolean foundEq = false;
				String temp = e1.toString();
				while(lstIdxEq > -1) {
					lstIdxEq = temp.indexOf('=');
					if(lstIdxEq != -1) {
						if(temp.charAt(lstIdxEq +1) != '=') {
							foundEq = true;
							break;
						}
					
						temp = temp.substring(0, lstIdxEq+1);
					}
				}
				if(foundEq) {
					scndCutfst = lstIdxEq;
				}
				int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
				if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
				}  
				fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
						if(e1.toString().length() >=3) {
							RESULT = e1 +"\n"+ i + " =" + fstoperand;
						}else {
							RESULT = i + " =" + e1;
						 //  System.out.println("RESULT2: "+e1);
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shortVarDecl",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // functionDecl ::= FUNC functionName function 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						//System.out.println("functionDecl " + f.toString() +"*********"+ f2.toString());
						RESULT = "\n"+ f +"\n" +f2;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // functionDecl ::= FUNC functionName signature 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = f;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // functionName ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = i+":";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionName",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // function ::= signature functionBody 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					
					RESULT = "begin_func;\n"+b+"\nend_func;";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // functionBody ::= block 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						//System.out.println("FUNCTION: " + b.toString());
						RESULT = b;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionBody",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // methodDecl ::= FUNC receiver methodName function 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // methodDecl ::= FUNC receiver methodName signature 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // receiver ::= parameters 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operand ::= literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//System.out.println("literal "+l);
				RESULT = l;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operand ::= operandName 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//System.out.println("operandName " + o);
				RESULT = o;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operand ::= methodExpr 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = me;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operand ::= OPEN_PARAN expression CLOSE_PARAN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = e;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= basicLit 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				////System.out.println("basicLit: " + b);
				RESULT = b;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= functionLit 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = f;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // basicLit ::= INT_LIT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basicLit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // basicLit ::= STRING_LIT 
            {
              Object RESULT =null;
		int s_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = s_l;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basicLit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operandName ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandName",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operandName ::= qualifiedIdent 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandName",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // qualifiedIdent ::= DOT packageName DOT IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						variable_count++;
						RESULT = "t"+ variable_count+ "= call "+i + "\n"+"pop_params;";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualifiedIdent",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // functionLit ::= FUNC function 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = f;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionLit",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // primaryExpr ::= operand 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
					//System.out.println("operand " + o);	
					RESULT = o;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // primaryExpr ::= primaryExpr selector 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
					RESULT = p+""+s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // primaryExpr ::= primaryExpr arguments 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
					
					String args = a.toString();
					if(args.charAt(0) == '\n') {
						args = args.substring(1);
					}
					if(p.toString().contains("call")) {
						RESULT =  args+"\n" + p;
					} else {
						RESULT =  args+"\nt" + ++variable_count + " = call " +p + "\npop_params;";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // selector ::= DOT IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arguments ::= OPEN_PARAN CLOSE_PARAN 
            {
              Object RESULT =null;
		
					RESULT ="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arguments ::= OPEN_PARAN expressionList CLOSE_PARAN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					String el = e.toString().replace("\n", "\npush_params: ");
					RESULT="\npush_params: "+el;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arguments ::= OPEN_PARAN TYPE type COMMA expressionList CLOSE_PARAN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // methodExpr ::= DOT receiverType DOT methodName 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodExpr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // receiverType ::= OPEN_PARAN ASTRISK typeName CLOSE_PARAN 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiverType",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // receiverType ::= OPEN_PARAN typeName CLOSE_PARAN 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiverType",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // statement ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
								
					RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // statement ::= simpleStmt SEMI_COLON 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
					RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // statement ::= returnStmt SEMI_COLON 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					
					RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // statement ::= breakStmt SEMI_COLON 
            {
              Object RESULT =null;
		
					
					RESULT ="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // statement ::= block optionalSemiColon 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					
					RESULT = b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // statement ::= ifStmt optionalSemiColon 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = is;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // statement ::= switchStmt optionalSemiColon 
            {
              Object RESULT =null;
		
					//System.out.println("STATEMENT: " + is.toString());
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // statement ::= forStmt optionalSemiColon 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = f;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // simpleStmt ::= expressionStmt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // simpleStmt ::= incDecStmt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // simpleStmt ::= assignment 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // simpleStmt ::= shortVarDecl 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expressionStmt ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = e;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionStmt",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // incDecStmt ::= expression INCREMENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incDecStmt",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // incDecStmt ::= expression DECREMENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incDecStmt",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // assignment ::= expressionList assignOp expressionList 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fstoperand = e1.toString();
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
						&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
							fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					//System.out.println("ASSIGNMENT: " + e1.toString() + " OP " + fstoperand);
					RESULT = e1 + "\n"+e+""+o +""+fstoperand;
					//Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // assignOp ::= PLUS EQUAL 
            {
              Object RESULT =null;
		
					RESULT = "+=";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // assignOp ::= MINUS EQUAL 
            {
              Object RESULT =null;
		
					RESULT = "-=";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // assignOp ::= ASTRISK EQUAL 
            {
              Object RESULT =null;
		
					RESULT = "*=";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // assignOp ::= SLASH EQUAL 
            {
              Object RESULT =null;
		
					RESULT = "/=";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // assignOp ::= SHIFT_LEFT EQUAL 
            {
              Object RESULT =null;
		
					RESULT = "<<=";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // assignOp ::= SHIFT_RIGHT EQUAL 
            {
              Object RESULT =null;
		
					RESULT = ">>=";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // assignOp ::= EQUAL 
            {
              Object RESULT =null;
		
					RESULT = "=";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ifStmt ::= IF expression block 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				++label_count;
				RESULT =  e + "\nIf t" + (variable_count-1) + " Goto L"+label_count+"\nGoto L" 
							+ ++label_count + "\nL" + (label_count-1)+":\n"+b + "\nL"+label_count+":";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ifStmt ::= IF simpleStmt SEMI_COLON expression block 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT =  s + "" + e + "" + b;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ifStmt ::= IF expression block ELSE ifStmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
				++label_count;
				RESULT = e + "\nIf t" + (variable_count-2) 
						+ " Goto L"+label_count+"\nGoto L" 
						+ ++label_count + "\nL" + (label_count-1)+":\n"+b + "\nGoto LL" +  (label_count-1)
						+ "\nL"+label_count+":"
						+"\n"+fs + "\nLL" +  (label_count-1)+":";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ifStmt ::= IF expression block ELSE block 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				++label_count;
				RESULT = e + "\nIf t" + (variable_count-2) 
						+ " Goto L"+label_count+"\nGoto L" 
						+ ++label_count + "\nL" + (label_count-1)+":\n"+b1 + "\nGoto LL" +  (label_count-1)
						+ "\nL"+label_count+":"
						+"\n"+b2 + "\nLL" +  (label_count-1)+":";
												//System.out.println("IF "+ RESULT);

			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ifStmt ::= IF simpleStmt SEMI_COLON expression block ELSE ifStmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 						

				String fstoperand = e1.toString();
				int fstCutfst = 0;
				int scndCutfst = e1.toString().length();
				int lstIdxEq = 0;
				boolean foundEq = false;
				String temp = e1.toString();
				while(lstIdxEq > -1) {
					lstIdxEq = temp.lastIndexOf('=');
					if(lstIdxEq != -1) {
						if(temp.charAt(lstIdxEq -1) != '=') {
							foundEq = true;
							break;
						}
					
						temp = temp.substring(0, lstIdxEq-1);
					}
				}
				if(foundEq) {
					scndCutfst = lstIdxEq;
				}
				int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
				if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
				}
				fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
				++label_count;
				RESULT = e + "\n" + e1 + "\nIf "+ fstoperand 
						+ " Goto L"+label_count+"\nGoto L" 
						+ ++label_count + "\nL" + (label_count-1)+":\n"+b + "\nGoto LL" +  (label_count-1)
						+ "\nL"+label_count+":"
						+"\n"+fs + "\nLL" +  (label_count-1)+":";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ifStmt ::= IF simpleStmt SEMI_COLON expression block ELSE block 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 
				RESULT= s;			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // switchStmt ::= exprSwitchStmt 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchStmt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // exprSwitchStmt ::= SWITCH OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // exprSwitchStmt ::= SWITCH simpleStmt SEMI_COLON OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
						RESULT = s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // exprSwitchStmt ::= SWITCH expression OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // exprSwitchStmt ::= SWITCH simpleStmt SEMI_COLON expression OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
						RESULT = s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // exprCaseClauses ::= exprCaseClause exprCaseClauses 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClauses",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // exprCaseClauses ::= 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClauses",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // exprCaseClause ::= exprSwitchCase COLON statementList 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClause",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // exprSwitchCase ::= CASE expression 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchCase",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // exprSwitchCase ::= DEFAULT 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchCase",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // forStmt ::= FOR forClause block 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= f+" ::::: "+b;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // forClause ::= initStmt SEMI_COLON condition SEMI_COLON postStmt 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= i+" ::::: "+c+" ::::: "+p;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // condition ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // initStmt ::= simpleStmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initStmt",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // postStmt ::= simpleStmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postStmt",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // returnStmt ::= RETURN 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // returnStmt ::= RETURN expressionList 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String elist = el.toString().replace("\n", ",");
					RESULT = r+" "+elist;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // breakStmt ::= BREAK 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakStmt",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // packageClause ::= PACKAGE packageName 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageClause",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // packageName ::= IDENTIFIER 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageName",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // importDecls ::= importDecl optionalSemiColon importDecls 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // importDecls ::= 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // importDecl ::= IMPORT importSpec 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // importDecl ::= IMPORT OPEN_PARAN importSpecs CLOSE_PARAN 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // importSpecs ::= importSpec optionalSemiColon importSpecs 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpecs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // importSpecs ::= 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpecs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // importSpec ::= importPath 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // importSpec ::= DOT importPath 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // importSpec ::= packageName importPath 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // importPath ::= STRING_LIT 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importPath",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
