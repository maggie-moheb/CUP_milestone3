
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\300\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\006\004\000\002\006\003\000\002\007\003" +
    "\000\002\007\004\000\002\007\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\020\004\000\002" +
    "\020\006\000\002\020\005\000\002\023\005\000\002\023" +
    "\004\000\002\024\003\000\002\024\005\000\002\024\006" +
    "\000\002\061\003\000\002\061\004\000\002\061\004\000" +
    "\002\061\004\000\002\061\004\000\002\061\004\000\002" +
    "\061\004\000\002\061\004\000\002\107\003\000\002\107" +
    "\003\000\002\107\003\000\002\107\003\000\002\115\003" +
    "\000\002\116\004\000\002\116\004\000\002\117\005\000" +
    "\002\112\005\000\002\112\007\000\002\112\007\000\002" +
    "\112\007\000\002\112\011\000\002\112\011\000\002\113" +
    "\003\000\002\121\006\000\002\121\010\000\002\121\007" +
    "\000\002\121\011\000\002\126\004\000\002\126\002\000" +
    "\002\127\005\000\002\130\004\000\002\130\003\000\002" +
    "\114\004\000\002\114\005\000\002\114\005\000\002\125" +
    "\007\000\002\125\006\000\002\125\006\000\002\125\006" +
    "\000\002\125\005\000\002\125\005\000\002\125\005\000" +
    "\002\125\004\000\002\124\003\000\002\122\003\000\002" +
    "\123\003\000\002\110\003\000\002\110\004\000\002\111" +
    "\003\000\002\025\003\000\002\025\005\000\002\026\003" +
    "\000\002\026\005\000\002\027\003\000\002\027\005\000" +
    "\002\054\003\000\002\054\003\000\002\062\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\071\005\000\002\064\006\000\002\067\003" +
    "\000\002\070\003\000\002\065\006\000\002\072\005\000" +
    "\002\072\002\000\002\073\004\000\002\073\005\000\002" +
    "\073\003\000\002\073\004\000\002\074\003\000\002\074" +
    "\004\000\002\075\003\000\002\066\004\000\002\021\004" +
    "\000\002\021\006\000\002\076\005\000\002\076\002\000" +
    "\002\077\004\000\002\022\004\000\002\022\006\000\002" +
    "\100\005\000\002\100\002\000\002\101\005\000\002\101" +
    "\004\000\002\101\006\000\002\102\005\000\002\016\005" +
    "\000\002\016\005\000\002\103\003\000\002\017\006\000" +
    "\002\017\006\000\002\105\003\000\002\104\003\000\002" +
    "\032\003\000\002\032\004\000\002\031\003\000\002\031" +
    "\004\000\002\031\004\000\002\037\004\000\002\040\004" +
    "\000\002\040\005\000\002\040\010\000\002\043\006\000" +
    "\002\106\006\000\002\106\005\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\005\000\002\041" +
    "\003\000\002\041\003\000\002\044\003\000\002\044\003" +
    "\000\002\042\003\000\002\042\003\000\002\046\006\000" +
    "\002\045\004\000\002\047\004\000\002\050\003\000\002" +
    "\050\004\000\002\053\003\000\002\053\005\000\002\052" +
    "\004\000\002\052\005\000\002\055\003\000\002\055\005" +
    "\000\002\056\004\000\002\056\005\000\002\051\003\000" +
    "\002\057\005\000\002\060\004\000\002\060\002\000\002" +
    "\003\004\000\002\004\005\000\002\004\002\000\002\005" +
    "\004\000\002\005\006\000\002\011\005\000\002\011\002" +
    "\000\002\012\003\000\002\012\004\000\002\012\004\000" +
    "\002\013\003\000\002\010\003\000\002\014\003\000\002" +
    "\014\002\000\002\120\004\000\002\120\004\000\002\120" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\004\012\005\001\002\000\004\002\u0148\001" +
    "\002\000\004\057\147\001\002\000\020\002\uff59\006\uff59" +
    "\014\uff59\016\uff59\020\uff59\022\uff59\035\007\001\002\000" +
    "\070\002\uff5a\004\uff5a\005\uff5a\006\uff5a\007\uff5a\013\uff5a" +
    "\014\uff5a\015\uff5a\016\uff5a\017\uff5a\020\uff5a\021\uff5a\022" +
    "\uff5a\025\uff5a\026\uff5a\027\uff5a\030\uff5a\031\uff5a\032\uff5a" +
    "\037\uff5a\044\uff5a\051\uff5a\052\uff5a\053\uff5a\057\uff5a\061" +
    "\uff5a\062\uff5a\001\002\000\016\002\uff64\006\uff64\014\uff64" +
    "\016\uff64\020\011\022\uff64\001\002\000\012\027\u013e\037" +
    "\u013f\057\147\061\u013c\001\002\000\020\002\uff59\006\uff59" +
    "\014\uff59\016\uff59\020\uff59\022\uff59\035\007\001\002\000" +
    "\014\002\uffff\006\015\014\027\016\024\022\023\001\002" +
    "\000\004\035\u0137\001\002\000\006\027\170\057\u012e\001" +
    "\002\000\014\002\ufffc\006\ufffc\014\ufffc\016\ufffc\022\ufffc" +
    "\001\002\000\014\002\ufffd\006\015\014\027\016\024\022" +
    "\023\001\002\000\016\002\uff59\006\uff59\014\uff59\016\uff59" +
    "\022\uff59\035\007\001\002\000\066\002\uff59\004\uff59\005" +
    "\uff59\006\uff59\007\uff59\013\uff59\014\uff59\015\uff59\016\uff59" +
    "\017\uff59\021\uff59\022\uff59\025\uff59\026\uff59\027\uff59\031" +
    "\uff59\032\uff59\035\007\037\uff59\044\uff59\051\uff59\052\uff59" +
    "\053\uff59\057\uff59\061\uff59\062\uff59\001\002\000\016\002" +
    "\uff59\006\uff59\014\uff59\016\uff59\022\uff59\035\007\001\002" +
    "\000\006\027\u011e\057\u011d\001\002\000\006\027\u0116\057" +
    "\u0115\001\002\000\004\002\000\001\002\000\004\035\u0113" +
    "\001\002\000\006\027\032\057\031\001\002\000\004\035" +
    "\ufff6\001\002\000\016\006\041\010\043\033\045\035\ufff1" +
    "\042\044\057\050\001\002\000\006\030\033\057\031\001" +
    "\002\000\004\035\ufff4\001\002\000\004\035\037\001\002" +
    "\000\004\030\036\001\002\000\004\035\ufff5\001\002\000" +
    "\006\030\ufff2\057\031\001\002\000\004\030\ufff3\001\002" +
    "\000\004\027\170\001\002\000\074\002\uffb2\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\021\uffb2\022\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\035\uffb2\036\uffb2\037\uffb2\042\uffb2" +
    "\044\uffb2\051\uffb2\052\uffb2\053\uffb2\057\uffb2\061\uffb2\062" +
    "\uffb2\001\002\000\004\031\u0103\001\002\000\032\006\067" +
    "\025\060\026\073\027\072\037\074\044\064\051\057\052" +
    "\071\053\061\057\063\061\056\062\076\001\002\000\034" +
    "\006\067\025\060\026\073\027\072\034\375\037\074\044" +
    "\064\051\057\052\071\053\061\057\063\061\056\062\076" +
    "\001\002\000\074\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\021\uffb4" +
    "\022\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\042\uffb4\044\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\057\uffb4\061\uffb4\062\uffb4\001\002\000" +
    "\004\042\055\001\002\000\074\002\uffb5\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\021\uffb5\022\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\035\uffb5\036\uffb5\037\uffb5\042\uffb5\044" +
    "\uffb5\051\uffb5\052\uffb5\053\uffb5\057\uffb5\061\uffb5\062\uffb5" +
    "\001\002\000\074\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\021\uffb7" +
    "\022\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\042\uffb7\044\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\057\uffb7\061\uffb7\062\uffb7\001\002\000" +
    "\074\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\042\uffb3\044\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\057\uffb3\061\uffb3\062\uffb3\001\002\000\074\002\uffb6" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\042\uffb6\044\uffb6\051\uffb6\052\uffb6\053\uffb6\057\uffb6" +
    "\061\uffb6\062\uffb6\001\002\000\074\002\uffb1\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\021\uffb1\022\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\035\uffb1\036\uffb1\037\uffb1\042\uffb1" +
    "\044\uffb1\051\uffb1\052\uffb1\053\uffb1\057\uffb1\061\uffb1\062" +
    "\uffb1\001\002\000\032\006\067\025\060\026\073\027\072" +
    "\037\074\044\064\051\057\052\071\053\061\057\063\061" +
    "\056\062\076\001\002\000\060\023\uff7a\024\uff7a\025\uff7a" +
    "\026\uff7a\027\uff7a\030\uff7a\031\uff7a\034\uff7a\035\uff7a\036" +
    "\uff7a\037\uff7a\040\uff7a\042\uff7a\044\uff7a\045\uff7a\046\uff7a" +
    "\047\uff7a\050\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\060" +
    "\uff7a\001\002\000\032\006\uff45\025\uff45\026\uff45\027\uff45" +
    "\037\uff45\044\uff45\051\uff45\052\uff45\053\uff45\057\uff45\061" +
    "\uff45\062\uff45\001\002\000\032\006\uff47\025\uff47\026\uff47" +
    "\027\uff47\037\uff47\044\uff47\051\uff47\052\uff47\053\uff47\057" +
    "\uff47\061\uff47\062\uff47\001\002\000\032\006\uff43\025\uff43" +
    "\026\uff43\027\uff43\037\uff43\044\uff43\051\uff43\052\uff43\053" +
    "\uff43\057\uff43\061\uff43\062\uff43\001\002\000\032\006\067" +
    "\025\060\026\073\027\072\037\074\044\064\051\057\052" +
    "\071\053\061\057\063\061\056\062\076\001\002\000\060" +
    "\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031" +
    "\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79\042\uff79" +
    "\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79\053\uff79\054" +
    "\uff79\055\uff79\056\uff79\060\uff79\001\002\000\032\006\uff44" +
    "\025\uff44\026\uff44\027\uff44\037\uff44\044\uff44\051\uff44\052" +
    "\uff44\053\uff44\057\uff44\061\uff44\062\uff44\001\002\000\034" +
    "\023\125\024\135\025\126\026\116\035\uffef\044\132\045" +
    "\131\046\123\047\122\050\117\053\127\054\124\060\120" +
    "\001\002\000\060\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027" +
    "\uff7f\030\uff7f\031\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f" +
    "\040\uff7f\042\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050" +
    "\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\060\uff7f\001\002" +
    "\000\004\027\170\001\002\000\060\023\uff7d\024\uff7d\025" +
    "\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\034\uff7d\035\uff7d" +
    "\036\uff7d\037\uff7d\040\uff7d\042\uff7d\044\uff7d\045\uff7d\046" +
    "\uff7d\047\uff7d\050\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d" +
    "\060\uff7d\001\002\000\032\006\uff42\025\uff42\026\uff42\027" +
    "\uff42\037\uff42\044\uff42\051\uff42\052\uff42\053\uff42\057\uff42" +
    "\061\uff42\062\uff42\001\002\000\032\006\067\025\060\026" +
    "\073\027\072\037\074\044\064\051\057\052\071\053\061" +
    "\057\063\061\056\062\076\001\002\000\032\006\uff46\025" +
    "\uff46\026\uff46\027\uff46\037\uff46\044\uff46\051\uff46\052\uff46" +
    "\053\uff46\057\uff46\061\uff46\062\uff46\001\002\000\006\027" +
    "\150\057\147\001\002\000\060\023\uff81\024\uff81\025\uff81" +
    "\026\uff81\027\uff81\030\uff81\031\uff81\034\uff81\035\uff81\036" +
    "\uff81\037\uff81\040\uff81\042\uff81\044\uff81\045\uff81\046\uff81" +
    "\047\uff81\050\uff81\053\uff81\054\uff81\055\uff81\056\uff81\060" +
    "\uff81\001\002\000\060\023\uff7b\024\uff7b\025\uff7b\026\uff7b" +
    "\027\uff7b\030\uff7b\031\uff7b\034\uff7b\035\uff7b\036\uff7b\037" +
    "\uff7b\040\uff7b\042\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b" +
    "\050\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\060\uff7b\001" +
    "\002\000\060\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\107" +
    "\030\uff8d\031\uff8d\034\uff8d\035\uff8d\036\uff8d\037\110\040" +
    "\uff8d\042\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d" +
    "\053\uff8d\054\uff8d\055\uff8d\056\uff8d\060\uff8d\001\002\000" +
    "\060\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80" +
    "\031\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\042" +
    "\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\053\uff80" +
    "\054\uff80\055\uff80\056\uff80\060\uff80\001\002\000\060\023" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\042\uff8b\044" +
    "\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\053\uff8b\054\uff8b" +
    "\055\uff8b\056\uff8b\060\uff8b\001\002\000\060\023\uff78\024" +
    "\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\034\uff78" +
    "\035\uff78\036\uff78\037\uff78\040\uff78\042\uff78\044\uff78\045" +
    "\uff78\046\uff78\047\uff78\050\uff78\053\uff78\054\uff78\055\uff78" +
    "\056\uff78\060\uff78\001\002\000\060\023\uff7c\024\uff7c\025" +
    "\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\034\uff7c\035\uff7c" +
    "\036\uff7c\037\uff7c\040\uff7c\042\uff7c\044\uff7c\045\uff7c\046" +
    "\uff7c\047\uff7c\050\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c" +
    "\060\uff7c\001\002\000\054\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\030\uffb9\031\uffb9\034\uffb9\035\uffb9\036\uffb9\040\uffb9" +
    "\042\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\060\uffb9\001\002\000\060" +
    "\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\042\uff8a" +
    "\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\053\uff8a\054" +
    "\uff8a\055\uff8a\056\uff8a\060\uff8a\001\002\000\060\023\uff89" +
    "\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\034" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\042\uff89\044\uff89" +
    "\045\uff89\046\uff89\047\uff89\050\uff89\053\uff89\054\uff89\055" +
    "\uff89\056\uff89\060\uff89\001\002\000\036\006\067\016\114" +
    "\025\060\026\073\027\072\030\112\037\074\044\064\051" +
    "\057\052\071\053\061\057\063\061\056\062\076\001\002" +
    "\000\004\057\111\001\002\000\060\023\uff88\024\uff88\025" +
    "\uff88\026\uff88\027\uff88\030\uff88\031\uff88\034\uff88\035\uff88" +
    "\036\uff88\037\uff88\040\uff88\042\uff88\044\uff88\045\uff88\046" +
    "\uff88\047\uff88\050\uff88\053\uff88\054\uff88\055\uff88\056\uff88" +
    "\060\uff88\001\002\000\060\023\uff87\024\uff87\025\uff87\026" +
    "\uff87\027\uff87\030\uff87\031\uff87\034\uff87\035\uff87\036\uff87" +
    "\037\uff87\040\uff87\042\uff87\044\uff87\045\uff87\046\uff87\047" +
    "\uff87\050\uff87\053\uff87\054\uff87\055\uff87\056\uff87\060\uff87" +
    "\001\002\000\004\030\144\001\002\000\012\006\041\010" +
    "\043\033\045\057\050\001\002\000\046\023\125\024\135" +
    "\025\126\026\116\030\uffbb\031\uffbb\035\uffbb\036\130\040" +
    "\uffbb\042\uffbb\044\132\045\131\046\123\047\122\050\117" +
    "\053\127\054\124\060\120\001\002\000\034\006\uff4f\025" +
    "\uff4f\026\uff4f\027\uff4f\037\uff4f\042\uff4f\044\uff4f\051\uff4f" +
    "\052\uff4f\053\uff4f\057\uff4f\061\uff4f\062\uff4f\001\002\000" +
    "\034\006\uff4c\025\uff4c\026\uff4c\027\uff4c\037\uff4c\042\uff4c" +
    "\044\uff4c\051\uff4c\052\uff4c\053\uff4c\057\uff4c\061\uff4c\062" +
    "\uff4c\001\002\000\032\006\uff52\025\uff52\026\uff52\027\uff52" +
    "\037\uff52\044\uff52\051\uff52\052\uff52\053\uff52\057\uff52\061" +
    "\uff52\062\uff52\001\002\000\032\006\uff51\025\uff51\026\uff51" +
    "\027\uff51\037\uff51\044\uff51\051\uff51\052\uff51\053\uff51\057" +
    "\uff51\061\uff51\062\uff51\001\002\000\034\006\uff4e\025\uff4e" +
    "\026\uff4e\027\uff4e\037\uff4e\042\uff4e\044\uff4e\051\uff4e\052" +
    "\uff4e\053\uff4e\057\uff4e\061\uff4e\062\uff4e\001\002\000\034" +
    "\006\uff4a\025\uff4a\026\uff4a\027\uff4a\037\uff4a\042\uff4a\044" +
    "\uff4a\051\uff4a\052\uff4a\053\uff4a\057\uff4a\061\uff4a\062\uff4a" +
    "\001\002\000\034\006\uff49\025\uff49\026\uff49\027\uff49\037" +
    "\uff49\042\uff49\044\uff49\051\uff49\052\uff49\053\uff49\057\uff49" +
    "\061\uff49\062\uff49\001\002\000\032\006\uff54\025\uff54\026" +
    "\uff54\027\uff54\037\uff54\044\uff54\051\uff54\052\uff54\053\uff54" +
    "\057\uff54\061\uff54\062\uff54\001\002\000\034\006\uff50\025" +
    "\uff50\026\uff50\027\uff50\037\uff50\042\uff50\044\uff50\051\uff50" +
    "\052\uff50\053\uff50\057\uff50\061\uff50\062\uff50\001\002\000" +
    "\034\006\uff48\025\uff48\026\uff48\027\uff48\037\uff48\042\uff48" +
    "\044\uff48\051\uff48\052\uff48\053\uff48\057\uff48\061\uff48\062" +
    "\uff48\001\002\000\032\006\067\025\060\026\073\027\072" +
    "\037\074\044\064\051\057\052\071\053\061\057\063\061" +
    "\056\062\076\001\002\000\034\006\uff4b\025\uff4b\026\uff4b" +
    "\027\uff4b\037\uff4b\042\uff4b\044\uff4b\051\uff4b\052\uff4b\053" +
    "\uff4b\057\uff4b\061\uff4b\062\uff4b\001\002\000\034\006\uff4d" +
    "\025\uff4d\026\uff4d\027\uff4d\037\uff4d\042\uff4d\044\uff4d\051" +
    "\uff4d\052\uff4d\053\uff4d\057\uff4d\061\uff4d\062\uff4d\001\002" +
    "\000\032\006\uff55\025\uff55\026\uff55\027\uff55\037\uff55\044" +
    "\uff55\051\uff55\052\uff55\053\uff55\057\uff55\061\uff55\062\uff55" +
    "\001\002\000\032\006\067\025\060\026\073\027\072\037" +
    "\074\044\064\051\057\052\071\053\061\057\063\061\056" +
    "\062\076\001\002\000\032\006\uff53\025\uff53\026\uff53\027" +
    "\uff53\037\uff53\044\uff53\051\uff53\052\uff53\053\uff53\057\uff53" +
    "\061\uff53\062\uff53\001\002\000\054\023\125\024\135\025" +
    "\126\026\116\030\uffb8\031\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\040\uffb8\042\uffb8\044\132\045\131\046\123\047\122\050" +
    "\117\053\127\054\124\055\uffb8\056\uffb8\060\120\001\002" +
    "\000\036\025\uffba\026\uffba\030\uffba\031\uffba\035\uffba\040" +
    "\uffba\042\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba" +
    "\053\uffba\054\uffba\001\002\000\004\036\141\001\002\000" +
    "\032\006\067\025\060\026\073\027\072\037\074\044\064" +
    "\051\057\052\071\053\061\057\063\061\056\062\076\001" +
    "\002\000\004\030\143\001\002\000\060\023\uff85\024\uff85" +
    "\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\034\uff85\035" +
    "\uff85\036\uff85\037\uff85\040\uff85\042\uff85\044\uff85\045\uff85" +
    "\046\uff85\047\uff85\050\uff85\053\uff85\054\uff85\055\uff85\056" +
    "\uff85\060\uff85\001\002\000\060\023\uff86\024\uff86\025\uff86" +
    "\026\uff86\027\uff86\030\uff86\031\uff86\034\uff86\035\uff86\036" +
    "\uff86\037\uff86\040\uff86\042\uff86\044\uff86\045\uff86\046\uff86" +
    "\047\uff86\050\uff86\053\uff86\054\uff86\055\uff86\056\uff86\060" +
    "\uff86\001\002\000\004\037\161\001\002\000\004\037\156" +
    "\001\002\000\024\002\uff5b\006\uff5b\014\uff5b\016\uff5b\020" +
    "\uff5b\022\uff5b\035\uff5b\037\uff5b\061\uff5b\001\002\000\006" +
    "\044\152\057\050\001\002\000\004\030\155\001\002\000" +
    "\004\057\050\001\002\000\004\030\154\001\002\000\004" +
    "\037\uff83\001\002\000\004\037\uff82\001\002\000\004\057" +
    "\160\001\002\000\060\023\uff84\024\uff84\025\uff84\026\uff84" +
    "\027\uff84\030\uff84\031\uff84\034\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\042\uff84\044\uff84\045\uff84\046\uff84\047\uff84" +
    "\050\uff84\053\uff84\054\uff84\055\uff84\056\uff84\060\uff84\001" +
    "\002\000\060\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e" +
    "\030\uff8e\031\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\042\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e" +
    "\053\uff8e\054\uff8e\055\uff8e\056\uff8e\060\uff8e\001\002\000" +
    "\004\057\162\001\002\000\060\023\uff77\024\uff77\025\uff77" +
    "\026\uff77\027\uff77\030\uff77\031\uff77\034\uff77\035\uff77\036" +
    "\uff77\037\uff77\040\uff77\042\uff77\044\uff77\045\uff77\046\uff77" +
    "\047\uff77\050\uff77\053\uff77\054\uff77\055\uff77\056\uff77\060" +
    "\uff77\001\002\000\034\023\125\024\135\025\126\026\116" +
    "\030\164\044\132\045\131\046\123\047\122\050\117\053" +
    "\127\054\124\060\120\001\002\000\060\023\uff7e\024\uff7e" +
    "\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\034\uff7e\035" +
    "\uff7e\036\uff7e\037\uff7e\040\uff7e\042\uff7e\044\uff7e\045\uff7e" +
    "\046\uff7e\047\uff7e\050\uff7e\053\uff7e\054\uff7e\055\uff7e\056" +
    "\uff7e\060\uff7e\001\002\000\060\023\uff76\024\uff76\025\uff76" +
    "\026\uff76\027\uff76\030\uff76\031\uff76\034\uff76\035\uff76\036" +
    "\uff76\037\uff76\040\uff76\042\uff76\044\uff76\045\uff76\046\uff76" +
    "\047\uff76\050\uff76\053\uff76\054\uff76\055\uff76\056\uff76\060" +
    "\uff76\001\002\000\004\031\214\001\002\000\074\002\uff74" +
    "\004\uff74\005\uff74\006\uff74\007\uff74\013\uff74\014\uff74\015" +
    "\uff74\016\uff74\017\uff74\021\uff74\022\uff74\025\uff74\026\uff74" +
    "\027\210\030\uff74\031\uff74\032\uff74\035\uff74\036\uff74\037" +
    "\uff74\042\uff74\044\uff74\051\uff74\052\uff74\053\uff74\057\uff74" +
    "\061\uff74\062\uff74\001\002\000\006\030\172\057\174\001" +
    "\002\000\006\030\uff6e\036\204\001\002\000\074\002\uff70" +
    "\004\uff70\005\uff70\006\uff70\007\uff70\013\uff70\014\uff70\015" +
    "\uff70\016\uff70\017\uff70\021\uff70\022\uff70\025\uff70\026\uff70" +
    "\027\uff70\030\uff70\031\uff70\032\uff70\035\uff70\036\uff70\037" +
    "\uff70\042\uff70\044\uff70\051\uff70\052\uff70\053\uff70\057\uff70" +
    "\061\uff70\062\uff70\001\002\000\004\030\203\001\002\000" +
    "\020\006\uffbd\010\uffbd\033\uffbd\036\201\041\uffbd\043\uffbd" +
    "\057\uffbd\001\002\000\014\006\041\010\043\033\045\043" +
    "\177\057\050\001\002\000\006\030\uff6c\036\uff6c\001\002" +
    "\000\012\006\041\010\043\033\045\057\050\001\002\000" +
    "\006\030\uff6b\036\uff6b\001\002\000\004\057\174\001\002" +
    "\000\016\006\uffbc\010\uffbc\033\uffbc\041\uffbc\043\uffbc\057" +
    "\uffbc\001\002\000\074\002\uff6f\004\uff6f\005\uff6f\006\uff6f" +
    "\007\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f\021" +
    "\uff6f\022\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f" +
    "\032\uff6f\035\uff6f\036\uff6f\037\uff6f\042\uff6f\044\uff6f\051" +
    "\uff6f\052\uff6f\053\uff6f\057\uff6f\061\uff6f\062\uff6f\001\002" +
    "\000\004\057\174\001\002\000\004\030\uff6d\001\002\000" +
    "\074\002\uff73\004\uff73\005\uff73\006\uff73\007\uff73\013\uff73" +
    "\014\uff73\015\uff73\016\uff73\017\uff73\021\uff73\022\uff73\025" +
    "\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\035\uff73" +
    "\036\uff73\037\uff73\042\uff73\044\uff73\051\uff73\052\uff73\053" +
    "\uff73\057\uff73\061\uff73\062\uff73\001\002\000\074\002\uff72" +
    "\004\uff72\005\uff72\006\uff72\007\uff72\013\uff72\014\uff72\015" +
    "\uff72\016\uff72\017\uff72\021\uff72\022\uff72\025\uff72\026\uff72" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\035\uff72\036\uff72\037" +
    "\uff72\042\uff72\044\uff72\051\uff72\052\uff72\053\uff72\057\uff72" +
    "\061\uff72\062\uff72\001\002\000\014\006\041\010\043\030" +
    "\172\033\045\057\212\001\002\000\004\030\213\001\002" +
    "\000\024\006\uffbd\010\uffbd\030\uffb5\033\uffbd\035\uffb5\036" +
    "\201\043\uffbd\057\uffbd\061\uffb5\001\002\000\074\002\uff71" +
    "\004\uff71\005\uff71\006\uff71\007\uff71\013\uff71\014\uff71\015" +
    "\uff71\016\uff71\017\uff71\021\uff71\022\uff71\025\uff71\026\uff71" +
    "\027\uff71\030\uff71\031\uff71\032\uff71\035\uff71\036\uff71\037" +
    "\uff71\042\uff71\044\uff71\051\uff71\052\uff71\053\uff71\057\uff71" +
    "\061\uff71\062\uff71\001\002\000\056\004\236\006\067\013" +
    "\241\014\027\015\227\016\024\017\223\021\233\022\023" +
    "\025\060\026\073\027\072\031\214\032\uff67\037\074\044" +
    "\064\051\057\052\071\053\061\057\246\061\056\062\076" +
    "\001\002\000\072\002\uff75\006\uff75\014\uff75\016\uff75\022" +
    "\uff75\023\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75" +
    "\031\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75\042" +
    "\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\053\uff75" +
    "\054\uff75\055\uff75\056\uff75\060\uff75\001\002\000\072\002" +
    "\uff6a\006\uff6a\014\uff6a\016\uff6a\022\uff6a\023\uff6a\024\uff6a" +
    "\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\034\uff6a\035" +
    "\uff6a\036\uff6a\037\uff6a\040\uff6a\042\uff6a\044\uff6a\045\uff6a" +
    "\046\uff6a\047\uff6a\050\uff6a\053\uff6a\054\uff6a\055\uff6a\056" +
    "\uff6a\060\uff6a\001\002\000\064\004\uff59\005\uff59\006\uff59" +
    "\007\uff59\013\uff59\014\uff59\015\uff59\016\uff59\017\uff59\021" +
    "\uff59\022\uff59\025\uff59\026\uff59\027\uff59\031\uff59\032\uff59" +
    "\035\007\037\uff59\044\uff59\051\uff59\052\uff59\053\uff59\057" +
    "\uff59\061\uff59\062\uff59\001\002\000\006\031\uffe6\035\uffe6" +
    "\001\002\000\064\004\uff59\005\uff59\006\uff59\007\uff59\013" +
    "\uff59\014\uff59\015\uff59\016\uff59\017\uff59\021\uff59\022\uff59" +
    "\025\uff59\026\uff59\027\uff59\031\uff59\032\uff59\035\007\037" +
    "\uff59\044\uff59\051\uff59\052\uff59\053\uff59\057\uff59\061\uff59" +
    "\062\uff59\001\002\000\064\004\uff59\005\uff59\006\uff59\007" +
    "\uff59\013\uff59\014\uff59\015\uff59\016\uff59\017\uff59\021\uff59" +
    "\022\uff59\025\uff59\026\uff59\027\uff59\031\uff59\032\uff59\035" +
    "\007\037\uff59\044\uff59\051\uff59\052\uff59\053\uff59\057\uff59" +
    "\061\uff59\062\uff59\001\002\000\036\006\067\025\060\026" +
    "\073\027\072\031\214\035\342\037\074\044\064\051\057" +
    "\052\071\053\061\057\246\061\056\062\076\001\002\000" +
    "\004\035\334\001\002\000\006\031\uffe4\035\uffe4\001\002" +
    "\000\004\041\332\001\002\000\032\006\067\025\060\026" +
    "\073\027\072\037\074\044\064\051\057\052\071\053\061" +
    "\057\246\061\056\062\076\001\002\000\006\031\uffe5\035" +
    "\uffe5\001\002\000\046\023\125\024\135\025\126\026\116" +
    "\031\uffe2\035\uffe2\036\130\042\uffbb\044\132\045\131\046" +
    "\123\047\122\050\117\053\127\054\124\055\255\056\254" +
    "\060\120\001\002\000\062\004\236\005\uff67\006\067\007" +
    "\uff67\013\241\014\027\015\227\016\024\017\223\021\233" +
    "\022\023\025\060\026\073\027\072\031\214\032\uff67\037" +
    "\074\044\064\051\057\052\071\053\061\057\246\061\056" +
    "\062\076\001\002\000\034\006\067\025\060\026\073\027" +
    "\072\035\uffc0\037\074\044\064\051\057\052\071\053\061" +
    "\057\063\061\056\062\076\001\002\000\064\004\uff59\005" +
    "\uff59\006\uff59\007\uff59\013\uff59\014\uff59\015\uff59\016\uff59" +
    "\017\uff59\021\uff59\022\uff59\025\uff59\026\uff59\027\uff59\031" +
    "\uff59\032\uff59\035\007\037\uff59\044\uff59\051\uff59\052\uff59" +
    "\053\uff59\057\uff59\061\uff59\062\uff59\001\002\000\004\035" +
    "\312\001\002\000\004\035\uffbe\001\002\000\026\025\126" +
    "\026\116\042\304\044\132\045\131\046\123\047\122\050" +
    "\117\053\127\054\124\001\002\000\004\035\302\001\002" +
    "\000\034\006\067\025\060\026\073\027\072\031\250\037" +
    "\074\044\064\051\057\052\071\053\061\057\246\061\056" +
    "\062\076\001\002\000\004\032\247\001\002\000\064\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\021\uffd8\022\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\031\uffd8\032\uffd8\035\uffd8\037\uffd8\044\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\057\uffd8\061\uffd8\062\uffd8\001\002\000" +
    "\062\004\uffee\005\uffee\006\uffee\007\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\021\uffee\022\uffee\025\uffee\026" +
    "\uffee\027\uffee\031\uffee\032\uffee\037\uffee\044\uffee\051\uffee" +
    "\052\uffee\053\uffee\057\uffee\061\uffee\062\uffee\001\002\000" +
    "\006\031\uffe3\035\uffe3\001\002\000\054\023\uff79\024\uff79" +
    "\025\uff79\026\uff79\027\uff79\031\uff79\035\uff79\036\201\037" +
    "\uff79\041\uffbd\042\uff79\044\uff79\045\uff79\046\uff79\047\uff79" +
    "\050\uff79\053\uff79\054\uff79\055\uff79\056\uff79\060\uff79\001" +
    "\002\000\126\002\uff69\004\uff69\005\uff69\006\uff69\007\uff69" +
    "\011\uff69\013\uff69\014\uff69\015\uff69\016\uff69\017\uff69\021" +
    "\uff69\022\uff69\023\uff69\024\uff69\025\uff69\026\uff69\027\uff69" +
    "\030\uff69\031\uff69\032\uff69\034\uff69\035\uff69\036\uff69\037" +
    "\uff69\040\uff69\042\uff69\044\uff69\045\uff69\046\uff69\047\uff69" +
    "\050\uff69\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\056" +
    "\uff69\057\uff69\060\uff69\061\uff69\062\uff69\001\002\000\010" +
    "\005\256\007\262\032\uffd2\001\002\000\004\035\270\001" +
    "\002\000\046\023\125\024\135\025\126\026\116\031\253" +
    "\035\uffe2\036\130\042\uffbb\044\132\045\131\046\123\047" +
    "\122\050\117\053\127\054\124\055\255\056\254\060\120" +
    "\001\002\000\010\005\256\007\262\032\uffd2\001\002\000" +
    "\006\031\uffe0\035\uffe0\001\002\000\006\031\uffe1\035\uffe1" +
    "\001\002\000\004\040\uffcf\001\002\000\010\005\256\007" +
    "\262\032\uffd2\001\002\000\004\040\265\001\002\000\004" +
    "\032\264\001\002\000\032\006\067\025\060\026\073\027" +
    "\072\037\074\044\064\051\057\052\071\053\061\057\063" +
    "\061\056\062\076\001\002\000\004\040\uffd0\001\002\000" +
    "\064\004\uffd5\005\uffd5\006\uffd5\007\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\031\uffd5\032\uffd5\035\uffd5\037\uffd5\044\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\057\uffd5\061\uffd5\062\uffd5\001" +
    "\002\000\062\004\236\005\uff67\006\067\007\uff67\013\241" +
    "\014\027\015\227\016\024\017\223\021\233\022\023\025" +
    "\060\026\073\027\072\031\214\032\uff67\037\074\044\064" +
    "\051\057\052\071\053\061\057\246\061\056\062\076\001" +
    "\002\000\010\005\uffd1\007\uffd1\032\uffd1\001\002\000\004" +
    "\032\uffd3\001\002\000\034\006\067\025\060\026\073\027" +
    "\072\031\271\037\074\044\064\051\057\052\071\053\061" +
    "\057\063\061\056\062\076\001\002\000\010\005\256\007" +
    "\262\032\uffd2\001\002\000\034\023\125\024\135\025\126" +
    "\026\116\031\273\044\132\045\131\046\123\047\122\050" +
    "\117\053\127\054\124\060\120\001\002\000\010\005\256" +
    "\007\262\032\uffd2\001\002\000\004\032\275\001\002\000" +
    "\064\004\uffd4\005\uffd4\006\uffd4\007\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\031\uffd4\032\uffd4\035\uffd4\037\uffd4\044\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\057\uffd4\061\uffd4\062\uffd4\001" +
    "\002\000\004\032\277\001\002\000\064\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\021\uffd6\022\uffd6\025\uffd6\026\uffd6\027\uffd6\031\uffd6" +
    "\032\uffd6\035\uffd6\037\uffd6\044\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\057\uffd6\061\uffd6\062\uffd6\001\002\000\004\032\301" +
    "\001\002\000\064\004\uffd7\005\uffd7\006\uffd7\007\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7\035\uffd7\037" +
    "\uffd7\044\uffd7\051\uffd7\052\uffd7\053\uffd7\057\uffd7\061\uffd7" +
    "\062\uffd7\001\002\000\062\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec" +
    "\022\uffec\025\uffec\026\uffec\027\uffec\031\uffec\032\uffec\037" +
    "\uffec\044\uffec\051\uffec\052\uffec\053\uffec\057\uffec\061\uffec" +
    "\062\uffec\001\002\000\004\042\311\001\002\000\032\006" +
    "\uff56\025\uff56\026\uff56\027\uff56\037\uff56\044\uff56\051\uff56" +
    "\052\uff56\053\uff56\057\uff56\061\uff56\062\uff56\001\002\000" +
    "\032\006\067\025\060\026\073\027\072\037\074\044\064" +
    "\051\057\052\071\053\061\057\063\061\056\062\076\001" +
    "\002\000\004\042\307\001\002\000\032\006\uff58\025\uff58" +
    "\026\uff58\027\uff58\037\uff58\044\uff58\051\uff58\052\uff58\053" +
    "\uff58\057\uff58\061\uff58\062\uff58\001\002\000\006\031\uffdf" +
    "\035\uffdf\001\002\000\032\006\uff57\025\uff57\026\uff57\027" +
    "\uff57\037\uff57\044\uff57\051\uff57\052\uff57\053\uff57\057\uff57" +
    "\061\uff57\062\uff57\001\002\000\062\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\021\uffeb\022\uffeb\025\uffeb\026\uffeb\027\uffeb\031\uffeb\032" +
    "\uffeb\037\uffeb\044\uffeb\051\uffeb\052\uffeb\053\uffeb\057\uffeb" +
    "\061\uffeb\062\uffeb\001\002\000\062\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\021\uffe8\022\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\032" +
    "\uffe8\037\uffe8\044\uffe8\051\uffe8\052\uffe8\053\uffe8\057\uffe8" +
    "\061\uffe8\062\uffe8\001\002\000\004\035\uffbf\001\002\000" +
    "\010\005\uff68\007\uff68\032\uff68\001\002\000\004\035\324" +
    "\001\002\000\046\023\125\024\135\025\126\026\116\031" +
    "\214\035\uffe2\036\130\042\uffbb\044\132\045\131\046\123" +
    "\047\122\050\117\053\127\054\124\055\255\056\254\060" +
    "\120\001\002\000\066\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\011\321\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\021" +
    "\uffde\022\uffde\025\uffde\026\uffde\027\uffde\031\uffde\032\uffde" +
    "\035\uffde\037\uffde\044\uffde\051\uffde\052\uffde\053\uffde\057" +
    "\uffde\061\uffde\062\uffde\001\002\000\006\015\227\031\214" +
    "\001\002\000\064\004\uffdc\005\uffdc\006\uffdc\007\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\031\uffdc\032\uffdc\035\uffdc\037" +
    "\uffdc\044\uffdc\051\uffdc\052\uffdc\053\uffdc\057\uffdc\061\uffdc" +
    "\062\uffdc\001\002\000\064\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb" +
    "\022\uffdb\025\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\035" +
    "\uffdb\037\uffdb\044\uffdb\051\uffdb\052\uffdb\053\uffdb\057\uffdb" +
    "\061\uffdb\062\uffdb\001\002\000\032\006\067\025\060\026" +
    "\073\027\072\037\074\044\064\051\057\052\071\053\061" +
    "\057\063\061\056\062\076\001\002\000\034\023\125\024" +
    "\135\025\126\026\116\031\214\044\132\045\131\046\123" +
    "\047\122\050\117\053\127\054\124\060\120\001\002\000" +
    "\066\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\327\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd\035\uffdd\037\uffdd" +
    "\044\uffdd\051\uffdd\052\uffdd\053\uffdd\057\uffdd\061\uffdd\062" +
    "\uffdd\001\002\000\006\015\227\031\214\001\002\000\064" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\021\uffda\022\uffda\025\uffda\026\uffda" +
    "\027\uffda\031\uffda\032\uffda\035\uffda\037\uffda\044\uffda\051" +
    "\uffda\052\uffda\053\uffda\057\uffda\061\uffda\062\uffda\001\002" +
    "\000\064\004\uffd9\005\uffd9\006\uffd9\007\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\031\uffd9\032\uffd9\035\uffd9\037\uffd9\044" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\057\uffd9\061\uffd9\062\uffd9" +
    "\001\002\000\032\006\067\025\060\026\073\027\072\037" +
    "\074\044\064\051\057\052\071\053\061\057\063\061\056" +
    "\062\076\001\002\000\036\023\125\024\135\025\126\026" +
    "\116\031\uff95\035\uff95\044\132\045\131\046\123\047\122" +
    "\050\117\053\127\054\124\060\120\001\002\000\062\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\021\uffed\022\uffed\025\uffed\026\uffed\027" +
    "\uffed\031\uffed\032\uffed\037\uffed\044\uffed\051\uffed\052\uffed" +
    "\053\uffed\057\uffed\061\uffed\062\uffed\001\002\000\004\031" +
    "\214\001\002\000\004\031\214\001\002\000\064\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\021\uffce\022\uffce\025\uffce\026\uffce\027\uffce" +
    "\031\uffce\032\uffce\035\uffce\037\uffce\044\uffce\051\uffce\052" +
    "\uffce\053\uffce\057\uffce\061\uffce\062\uffce\001\002\000\004" +
    "\035\uffc2\001\002\000\046\023\125\024\135\025\126\026" +
    "\116\031\uffc3\035\uffe2\036\130\042\uffbb\044\132\045\131" +
    "\046\123\047\122\050\117\053\127\054\124\055\255\056" +
    "\254\060\120\001\002\000\036\006\067\025\060\026\073" +
    "\027\072\031\uff59\035\356\037\074\044\064\051\057\052" +
    "\071\053\061\057\063\061\056\062\076\001\002\000\004" +
    "\035\344\001\002\000\036\006\067\025\060\026\073\027" +
    "\072\031\uff59\035\345\037\074\044\064\051\057\052\071" +
    "\053\061\057\063\061\056\062\076\001\002\000\034\006" +
    "\067\025\060\026\073\027\072\031\uff5a\037\074\044\064" +
    "\051\057\052\071\053\061\057\246\061\056\062\076\001" +
    "\002\000\004\031\uffc5\001\002\000\036\023\125\024\135" +
    "\025\126\026\116\031\uffc3\035\uffc3\044\132\045\131\046" +
    "\123\047\122\050\117\053\127\054\124\060\120\001\002" +
    "\000\006\031\uff59\035\351\001\002\000\034\006\067\025" +
    "\060\026\073\027\072\031\uff5a\037\074\044\064\051\057" +
    "\052\071\053\061\057\246\061\056\062\076\001\002\000" +
    "\004\031\uffc8\001\002\000\004\031\uffcb\001\002\000\004" +
    "\031\uffc1\001\002\000\004\031\uffc9\001\002\000\034\006" +
    "\067\025\060\026\073\027\072\031\uff5a\037\074\044\064" +
    "\051\057\052\071\053\061\057\246\061\056\062\076\001" +
    "\002\000\004\031\uffc4\001\002\000\006\031\uff59\035\361" +
    "\001\002\000\034\006\067\025\060\026\073\027\072\031" +
    "\uff5a\037\074\044\064\051\057\052\071\053\061\057\246" +
    "\061\056\062\076\001\002\000\004\031\uffc6\001\002\000" +
    "\004\031\uffca\001\002\000\004\031\uffc7\001\002\000\064" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\031\uffcc\032\uffcc\035\uffcc\037\uffcc\044\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\057\uffcc\061\uffcc\062\uffcc\001\002" +
    "\000\064\004\uffcd\005\uffcd\006\uffcd\007\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\031\uffcd\032\uffcd\035\uffcd\037\uffcd\044" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\057\uffcd\061\uffcd\062\uffcd" +
    "\001\002\000\062\004\uffea\005\uffea\006\uffea\007\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\021\uffea\022\uffea" +
    "\025\uffea\026\uffea\027\uffea\031\uffea\032\uffea\037\uffea\044" +
    "\uffea\051\uffea\052\uffea\053\uffea\057\uffea\061\uffea\062\uffea" +
    "\001\002\000\062\004\uffe7\005\uffe7\006\uffe7\007\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\022\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\031\uffe7\032\uffe7\037\uffe7\044" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\057\uffe7\061\uffe7\062\uffe7" +
    "\001\002\000\062\004\uffe9\005\uffe9\006\uffe9\007\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\022\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\031\uffe9\032\uffe9\037\uffe9\044" +
    "\uffe9\051\uffe9\052\uffe9\053\uffe9\057\uffe9\061\uffe9\062\uffe9" +
    "\001\002\000\054\023\uff8c\024\uff8c\025\uff8c\026\uff8c\030" +
    "\uff8c\031\uff8c\034\uff8c\035\uff8c\036\uff8c\040\uff8c\042\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\053\uff8c\054" +
    "\uff8c\055\uff8c\056\uff8c\060\uff8c\001\002\000\004\034\u0100" +
    "\001\002\000\034\023\125\024\135\025\126\026\116\034" +
    "\uffae\044\132\045\131\046\123\047\122\050\117\053\127" +
    "\054\124\060\120\001\002\000\012\006\041\010\043\033" +
    "\045\057\050\001\002\000\074\002\uffb0\004\uffb0\005\uffb0" +
    "\006\uffb0\007\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\021\uffb0\022\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\035\uffb0\036\uffb0\037\uffb0\042\uffb0\044" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\057\uffb0\061\uffb0\062\uffb0" +
    "\001\002\000\074\002\uffad\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\021\uffad" +
    "\022\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\035\uffad\036\uffad\037\uffad\042\uffad\044\uffad\051\uffad" +
    "\052\uffad\053\uffad\057\uffad\061\uffad\062\uffad\001\002\000" +
    "\012\006\041\010\043\033\045\057\050\001\002\000\074" +
    "\002\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\042\uffaf\044\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\057\uffaf\061\uffaf\062\uffaf\001\002\000\034\023\125\024" +
    "\135\025\126\026\116\035\ufff0\044\132\045\131\046\123" +
    "\047\122\050\117\053\127\054\124\060\120\001\002\000" +
    "\010\032\uffaa\044\u0107\057\212\001\002\000\004\032\u0111" +
    "\001\002\000\006\035\uffa5\061\uffa5\001\002\000\006\035" +
    "\uffa7\061\u010c\001\002\000\004\057\050\001\002\000\004" +
    "\035\u010d\001\002\000\012\006\041\010\043\033\045\057" +
    "\050\001\002\000\006\035\uffa9\061\u010c\001\002\000\004" +
    "\035\uffa8\001\002\000\004\035\uffa3\001\002\000\010\032" +
    "\uffaa\044\u0107\057\212\001\002\000\004\032\uffab\001\002" +
    "\000\006\035\uffa4\061\uffa4\001\002\000\004\035\uffa6\001" +
    "\002\000\074\002\uffac\004\uffac\005\uffac\006\uffac\007\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\021\uffac\022" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\035\uffac\036\uffac\037\uffac\042\uffac\044\uffac\051\uffac\052" +
    "\uffac\053\uffac\057\uffac\061\uffac\062\uffac\001\002\000\074" +
    "\002\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\042\uffa2\044\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\057\uffa2\061\uffa2\062\uffa2\001\002\000\064\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\021\ufff9\022\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\031\ufff9\032\ufff9\037\ufff9\044\ufff9\051\ufff9\052\ufff9" +
    "\053\ufff9\057\ufff9\061\ufff9\062\ufff9\001\002\000\066\002" +
    "\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\017\uffa1\021\uffa1\022\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\031\uffa1\032\uffa1\035\uffa1\037\uffa1\044\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\057\uffa1\061\uffa1\062\uffa1\001" +
    "\002\000\012\006\041\010\043\033\045\057\050\001\002" +
    "\000\006\030\uff9e\057\u0115\001\002\000\004\035\u011a\001" +
    "\002\000\004\030\u0119\001\002\000\066\002\uffa0\004\uffa0" +
    "\005\uffa0\006\uffa0\007\uffa0\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\021\uffa0\022\uffa0\025\uffa0\026\uffa0\027\uffa0" +
    "\031\uffa0\032\uffa0\035\uffa0\037\uffa0\044\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\057\uffa0\061\uffa0\062\uffa0\001\002\000\006" +
    "\030\uff9e\057\u0115\001\002\000\004\030\uff9f\001\002\000" +
    "\066\002\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\016\uff9d\017\uff9d\021\uff9d\022\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\031\uff9d\032\uff9d\035\uff9d\037\uff9d" +
    "\044\uff9d\051\uff9d\052\uff9d\053\uff9d\057\uff9d\061\uff9d\062" +
    "\uff9d\001\002\000\014\006\041\010\043\033\045\042\u0125" +
    "\057\050\001\002\000\006\030\uff99\057\u011d\001\002\000" +
    "\004\035\uff9c\001\002\000\004\030\u0124\001\002\000\004" +
    "\035\u0122\001\002\000\006\030\uff99\057\u011d\001\002\000" +
    "\004\030\uff9a\001\002\000\004\035\uff9b\001\002\000\032" +
    "\006\067\025\060\026\073\027\072\037\074\044\064\051" +
    "\057\052\071\053\061\057\063\061\056\062\076\001\002" +
    "\000\006\035\uff97\042\u0127\001\002\000\032\006\067\025" +
    "\060\026\073\027\072\037\074\044\064\051\057\052\071" +
    "\053\061\057\063\061\056\062\076\001\002\000\034\023" +
    "\125\024\135\025\126\026\116\035\uff96\044\132\045\131" +
    "\046\123\047\122\050\117\053\127\054\124\060\120\001" +
    "\002\000\034\023\125\024\135\025\126\026\116\035\uff98" +
    "\044\132\045\131\046\123\047\122\050\117\053\127\054" +
    "\124\060\120\001\002\000\014\002\ufffa\006\ufffa\014\ufffa" +
    "\016\ufffa\022\ufffa\001\002\000\064\002\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\021\ufff8\022\ufff8\025\ufff8\026\ufff8\027\ufff8\031" +
    "\ufff8\032\ufff8\037\ufff8\044\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\057\ufff8\061\ufff8\062\ufff8\001\002\000\014\002\ufffb\006" +
    "\ufffb\014\ufffb\016\ufffb\022\ufffb\001\002\000\004\002\ufffe" +
    "\001\002\000\004\027\uff92\001\002\000\004\057\uff8f\001" +
    "\002\000\004\027\170\001\002\000\004\057\160\001\002" +
    "\000\004\027\170\001\002\000\016\002\uff91\006\uff91\014" +
    "\uff91\016\uff91\022\uff91\035\uff91\001\002\000\020\002\uff90" +
    "\006\uff90\014\uff90\016\uff90\022\uff90\031\214\035\uff90\001" +
    "\002\000\016\002\uff94\006\uff94\014\uff94\016\uff94\022\uff94" +
    "\035\uff94\001\002\000\020\002\uff93\006\uff93\014\uff93\016" +
    "\uff93\022\uff93\031\214\035\uff93\001\002\000\064\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\031\ufff7\032\ufff7\037\ufff7\044\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\057\ufff7\061\ufff7\062\ufff7\001\002\000\016" +
    "\002\uff64\006\uff64\014\uff64\016\uff64\020\011\022\uff64\001" +
    "\002\000\014\002\uff65\006\uff65\014\uff65\016\uff65\022\uff65" +
    "\001\002\000\004\061\u013c\001\002\000\030\002\uff5f\006" +
    "\uff5f\014\uff5f\016\uff5f\020\uff5f\022\uff5f\030\uff5f\035\uff5f" +
    "\037\uff5f\057\uff5f\061\uff5f\001\002\000\030\002\uff5c\006" +
    "\uff5c\014\uff5c\016\uff5c\020\uff5c\022\uff5c\030\uff5c\035\uff5c" +
    "\037\uff5c\057\uff5c\061\uff5c\001\002\000\020\002\uff63\006" +
    "\uff63\014\uff63\016\uff63\020\uff63\022\uff63\035\uff63\001\002" +
    "\000\012\030\uff60\037\u013f\057\147\061\u013c\001\002\000" +
    "\004\061\u013c\001\002\000\030\002\uff5e\006\uff5e\014\uff5e" +
    "\016\uff5e\020\uff5e\022\uff5e\030\uff5e\035\uff5e\037\uff5e\057" +
    "\uff5e\061\uff5e\001\002\000\004\030\u0145\001\002\000\014" +
    "\030\uff59\035\007\037\uff59\057\uff59\061\uff59\001\002\000" +
    "\012\030\uff60\037\u013f\057\147\061\u013c\001\002\000\004" +
    "\030\uff61\001\002\000\020\002\uff62\006\uff62\014\uff62\016" +
    "\uff62\020\uff62\022\uff62\035\uff62\001\002\000\030\002\uff5d" +
    "\006\uff5d\014\uff5d\016\uff5d\020\uff5d\022\uff5d\030\uff5d\035" +
    "\uff5d\037\uff5d\057\uff5d\061\uff5d\001\002\000\020\002\uff66" +
    "\006\uff66\014\uff66\016\uff66\020\uff66\022\uff66\035\uff66\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\010\u0146\001\001\000\004\014\007\001\001" +
    "\000\002\001\001\000\006\004\012\005\011\001\001\000" +
    "\010\010\u0139\012\u013c\013\u013a\001\001\000\004\014\u0137" +
    "\001\001\000\022\006\024\007\016\015\015\016\017\017" +
    "\021\020\025\021\020\022\013\001\001\000\002\001\001" +
    "\000\010\052\u012e\103\u012f\105\u0130\001\001\000\002\001" +
    "\001\000\022\006\u012c\007\016\015\015\016\017\017\021" +
    "\020\025\021\020\022\013\001\001\000\004\014\u012b\001" +
    "\001\000\004\014\u012a\001\001\000\004\014\u0129\001\001" +
    "\000\004\101\u011e\001\001\000\004\077\u0113\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\027\001\001" +
    "\000\002\001\001\000\020\054\046\062\050\063\052\064" +
    "\045\065\051\066\041\071\053\001\001\000\006\023\034" +
    "\024\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\037\024\033" +
    "\001\001\000\002\001\001\000\006\050\u0111\052\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\027\u0101" +
    "\031\076\032\103\033\061\036\100\041\074\042\077\043" +
    "\065\044\067\045\102\046\101\001\001\000\032\027\373" +
    "\031\076\032\103\033\061\036\100\041\074\042\077\043" +
    "\065\044\067\045\102\046\101\067\372\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\027\064\031\076\032\103\033\061\036\100\041" +
    "\074\042\077\043\065\044\067\045\102\046\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\031\076\032\371\033\061\036\100" +
    "\041\074\042\077\043\065\044\067\045\102\046\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\133" +
    "\034\120\035\132\001\001\000\002\001\001\000\010\047" +
    "\164\050\165\052\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\027\162\031\076\032\103\033\061\036" +
    "\100\041\074\042\077\043\065\044\067\045\102\046\101" +
    "\001\001\000\002\001\001\000\006\010\144\106\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\104" +
    "\040\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\026\112\027\114\031" +
    "\076\032\103\033\061\036\100\041\074\042\077\043\065" +
    "\044\067\045\102\046\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\054\137\062\050\063\052\064\045\065\051\066\041\071" +
    "\053\001\001\000\010\030\133\034\120\035\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\026\136\027\114\031\076\032\103\033\061" +
    "\036\100\041\074\042\077\043\065\044\067\045\102\046" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\027\135\031\076\032\103\033\061\036" +
    "\100\041\074\042\077\043\065\044\067\045\102\046\101" +
    "\001\001\000\002\001\001\000\010\030\133\034\120\035" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\026\141\027\114\031\076\032\103\033\061\036\100\041" +
    "\074\042\077\043\065\044\067\045\102\046\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\150\001\001\000\002\001\001\000\004\062\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\104\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\133" +
    "\034\120\035\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\214\057\215\001\001\000\006\052\206" +
    "\053\205\001\001\000\010\025\174\055\172\056\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\054\175\062\050\063\052\064" +
    "\045\065\051\066\041\071\053\001\001\000\002\001\001" +
    "\000\020\054\177\062\050\063\052\064\045\065\051\066" +
    "\041\071\053\001\001\000\002\001\001\000\004\025\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\174\055\204\056\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\025\174\054\210\055" +
    "\172\056\170\062\050\063\052\064\045\065\051\066\041" +
    "\071\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\100\015\243\020\025\021\020\022\013" +
    "\025\225\026\236\027\230\031\076\032\103\033\061\036" +
    "\100\041\074\042\077\043\065\044\067\045\102\046\101" +
    "\057\221\060\241\061\231\102\244\107\223\110\237\111" +
    "\234\112\216\113\233\114\220\115\217\116\227\117\224" +
    "\121\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\370\001\001\000\002\001\001\000\004\014\367" +
    "\001\001\000\004\014\366\001\001\000\056\025\225\026" +
    "\236\027\340\031\076\032\103\033\061\036\100\041\074" +
    "\042\077\043\065\044\067\045\102\046\101\057\336\102" +
    "\244\107\337\115\217\116\227\117\224\122\342\124\334" +
    "\125\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\025\225\026\236\027\316\031\076" +
    "\032\103\033\061\036\100\041\074\042\077\043\065\044" +
    "\067\045\102\046\101\102\244\107\315\115\217\116\227" +
    "\117\224\001\001\000\002\001\001\000\010\030\133\034" +
    "\120\035\132\001\001\000\100\015\243\020\025\021\020" +
    "\022\013\025\225\026\236\027\230\031\076\032\103\033" +
    "\061\036\100\041\074\042\077\043\065\044\067\045\102" +
    "\046\101\057\221\060\314\061\231\102\244\107\223\110" +
    "\237\111\234\112\216\113\233\114\220\115\217\116\227" +
    "\117\224\121\242\001\001\000\032\026\313\027\114\031" +
    "\076\032\103\033\061\036\100\041\074\042\077\043\065" +
    "\044\067\045\102\046\101\001\001\000\004\014\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\302" +
    "\035\305\120\304\001\001\000\002\001\001\000\046\025" +
    "\225\026\236\027\251\031\076\032\103\033\061\036\100" +
    "\041\074\042\077\043\065\044\067\045\102\046\101\102" +
    "\244\107\250\115\217\116\227\117\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\126\277" +
    "\127\256\130\257\001\001\000\002\001\001\000\010\030" +
    "\133\034\120\035\132\001\001\000\010\126\260\127\256" +
    "\130\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\126\266\127\256\130\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\026\262\027" +
    "\114\031\076\032\103\033\061\036\100\041\074\042\077" +
    "\043\065\044\067\045\102\046\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\100\015\243\020\025\021\020" +
    "\022\013\025\225\026\236\027\230\031\076\032\103\033" +
    "\061\036\100\041\074\042\077\043\065\044\067\045\102" +
    "\046\101\057\221\060\265\061\231\102\244\107\223\110" +
    "\237\111\234\112\216\113\233\114\220\115\217\116\227" +
    "\117\224\121\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\027\271\031\076\032\103\033\061\036\100" +
    "\041\074\042\077\043\065\044\067\045\102\046\101\001" +
    "\001\000\010\126\275\127\256\130\257\001\001\000\010" +
    "\030\133\034\120\035\132\001\001\000\010\126\273\127" +
    "\256\130\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\026\307\027\114\031\076\032\103\033" +
    "\061\036\100\041\074\042\077\043\065\044\067\045\102" +
    "\046\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\133\034\120\035\132\057\317\001\001" +
    "\000\002\001\001\000\006\057\322\112\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\027\324\031\076" +
    "\032\103\033\061\036\100\041\074\042\077\043\065\044" +
    "\067\045\102\046\101\001\001\000\012\030\133\034\120" +
    "\035\132\057\325\001\001\000\002\001\001\000\006\057" +
    "\330\112\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\027\332\031\076\032\103\033\061\036\100\041" +
    "\074\042\077\043\065\044\067\045\102\046\101\001\001" +
    "\000\010\030\133\034\120\035\132\001\001\000\002\001" +
    "\001\000\004\057\365\001\001\000\004\057\364\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\133\034" +
    "\120\035\132\001\001\000\034\014\356\027\346\031\076" +
    "\032\103\033\061\036\100\041\074\042\077\043\065\044" +
    "\067\045\102\046\101\124\357\001\001\000\002\001\001" +
    "\000\034\014\345\027\346\031\076\032\103\033\061\036" +
    "\100\041\074\042\077\043\065\044\067\045\102\046\101" +
    "\124\347\001\001\000\050\025\225\026\236\027\230\031" +
    "\076\032\103\033\061\036\100\041\074\042\077\043\065" +
    "\044\067\045\102\046\101\102\244\107\353\115\217\116" +
    "\227\117\224\123\354\001\001\000\002\001\001\000\010" +
    "\030\133\034\120\035\132\001\001\000\004\014\351\001" +
    "\001\000\050\025\225\026\236\027\230\031\076\032\103" +
    "\033\061\036\100\041\074\042\077\043\065\044\067\045" +
    "\102\046\101\102\244\107\353\115\217\116\227\117\224" +
    "\123\352\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\025\225\026\236" +
    "\027\230\031\076\032\103\033\061\036\100\041\074\042" +
    "\077\043\065\044\067\045\102\046\101\102\244\107\353" +
    "\115\217\116\227\117\224\123\363\001\001\000\002\001" +
    "\001\000\004\014\361\001\001\000\050\025\225\026\236" +
    "\027\230\031\076\032\103\033\061\036\100\041\074\042" +
    "\077\043\065\044\067\045\102\046\101\102\244\107\353" +
    "\115\217\116\227\117\224\123\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\133\034\120\035\132\001\001\000\022\054\376\062" +
    "\050\063\052\064\045\065\051\066\041\070\375\071\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\054" +
    "\376\062\050\063\052\064\045\065\051\066\041\070\u0100" +
    "\071\053\001\001\000\002\001\001\000\010\030\133\034" +
    "\120\035\132\001\001\000\014\025\u0108\062\u0104\072\u0103" +
    "\073\u0107\074\u0105\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\u010f\001\001\000\004\062\u010e\001\001" +
    "\000\002\001\001\000\020\054\u0109\062\050\063\052\064" +
    "\045\065\051\066\041\071\053\001\001\000\004\075\u010a" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\u0108\062\u0104\072\u010d\073\u0107\074\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\054\u011b\062\050\063\052\064\045\065\051\066" +
    "\041\071\053\001\001\000\006\076\u0117\077\u0116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\076\u011a\077\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\054\u0125\062\050\063\052\064\045\065" +
    "\051\066\041\071\053\001\001\000\006\100\u011f\101\u0120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\100\u0122\101\u0120\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\027\u0128\031\076\032\103\033" +
    "\061\036\100\041\074\042\077\043\065\044\067\045\102" +
    "\046\101\001\001\000\002\001\001\000\030\027\u0127\031" +
    "\076\032\103\033\061\036\100\041\074\042\077\043\065" +
    "\044\067\045\102\046\101\001\001\000\010\030\133\034" +
    "\120\035\132\001\001\000\010\030\133\034\120\035\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\047\u0134\050\u0135\052\166\001\001\000\004\104" +
    "\u0131\001\001\000\010\047\u0132\050\u0133\052\166\001\001" +
    "\000\002\001\001\000\006\051\214\057\215\001\001\000" +
    "\002\001\001\000\006\051\214\057\215\001\001\000\002" +
    "\001\001\000\006\004\u0138\005\011\001\001\000\002\001" +
    "\001\000\004\013\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\u0139\011\u0140\012" +
    "\u0141\013\u013a\001\001\000\004\013\u013f\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u0142\001\001\000" +
    "\012\010\u0139\011\u0143\012\u0141\013\u013a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  String Z = "";
  String S_L = "";
  int variable_count = -1;
  String Q_I = "";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sourceFile EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sourceFile ::= packageClause optionalSemiColon importDecls topLevelDecls 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Z +="";
					RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sourceFile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sourceFile ::= packageClause optionalSemiColon importDecls 
            {
              Object RESULT =null;
		
					Z +="";
					RESULT = Z;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sourceFile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // topLevelDecls ::= topLevelDecl topLevelDecls 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = d1+""+d2;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // topLevelDecls ::= topLevelDecl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = d;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // topLevelDecl ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						//System.out.println("DECLARATION: "+d);
						RESULT = d;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // topLevelDecl ::= functionDecl optionalSemiColon 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object osc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = fd;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // topLevelDecl ::= methodDecl optionalSemiColon 
            {
              Object RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object osc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = md;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= constDecl SEMI_COLON 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = d;

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= typeDecl optionalSemiColon 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object osc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = td;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= varDecl SEMI_COLON 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					//System.out.println("DECLARATION: "+vd);
					RESULT = vd;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constDecl ::= CONST constSpec 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = c;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constDecl ::= CONST OPEN_PARAN constSpecs CLOSE_PARAN 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constDecl ::= CONST OPEN_PARAN CLOSE_PARAN 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constSpecs ::= constSpec SEMI_COLON constSpecs 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpecs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constSpecs ::= constSpec SEMI_COLON 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpecs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constSpec ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constSpec ::= IDENTIFIER EQUAL expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i +" = " +e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constSpec ::= IDENTIFIER type EQUAL expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i+" = "+e;
				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= simpleStmt SEMI_COLON 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
						
					RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= returnStmt SEMI_COLON 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT ="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= breakStmt SEMI_COLON 
            {
              Object RESULT =null;
		
					RESULT ="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= block optionalSemiColon 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= ifStmt optionalSemiColon 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= switchStmt optionalSemiColon 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= forStmt optionalSemiColon 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simpleStmt ::= expressionStmt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simpleStmt ::= incDecStmt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // simpleStmt ::= assignment 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simpleStmt ::= shortVarDecl 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressionStmt ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = e;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionStmt",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // incDecStmt ::= expression INCREMENT 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incDecStmt",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // incDecStmt ::= expression DECREMENT 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incDecStmt",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignment ::= expressionList assignOp expressionList 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e+"\n"+e2;
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ifStmt ::= IF expression block 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ifStmt ::= IF simpleStmt SEMI_COLON expression block 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				RESULT = s;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ifStmt ::= IF expression block ELSE ifStmt 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ifStmt ::= IF expression block ELSE block 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ifStmt ::= IF simpleStmt SEMI_COLON expression block ELSE ifStmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
			RESULT = s;
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ifStmt ::= IF simpleStmt SEMI_COLON expression block ELSE block 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
				RESULT= s;			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // switchStmt ::= exprSwitchStmt 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchStmt",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exprSwitchStmt ::= SWITCH OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exprSwitchStmt ::= SWITCH simpleStmt SEMI_COLON OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
						RESULT = s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exprSwitchStmt ::= SWITCH expression OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exprSwitchStmt ::= SWITCH simpleStmt SEMI_COLON expression OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
						RESULT = s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprCaseClauses ::= exprCaseClause exprCaseClauses 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClauses",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprCaseClauses ::= 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClauses",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprCaseClause ::= exprSwitchCase COLON statementList 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClause",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprSwitchCase ::= CASE expressionList 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchCase",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exprSwitchCase ::= DEFAULT 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchCase",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // forStmt ::= FOR block 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // forStmt ::= FOR condition block 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // forStmt ::= FOR forClause block 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // forClause ::= initStmt SEMI_COLON condition SEMI_COLON postStmt 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // forClause ::= SEMI_COLON condition SEMI_COLON postStmt 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // forClause ::= initStmt SEMI_COLON SEMI_COLON postStmt 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // forClause ::= initStmt SEMI_COLON condition optionalSemiColon 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // forClause ::= SEMI_COLON SEMI_COLON postStmt 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // forClause ::= SEMI_COLON condition optionalSemiColon 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // forClause ::= initStmt SEMI_COLON optionalSemiColon 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // forClause ::= SEMI_COLON optionalSemiColon 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condition ::= expression 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // initStmt ::= simpleStmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initStmt",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // postStmt ::= simpleStmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postStmt",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // returnStmt ::= RETURN 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // returnStmt ::= RETURN expressionList 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // breakStmt ::= BREAK 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakStmt",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // identifierList ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = i;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // identifierList ::= IDENTIFIER COMMA identifierList 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = i + "" + i1;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expressionList ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						////System.out.println("expr_l " + e);
						RESULT = e;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expressionList ::= expression COMMA expressionList 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = e+"\n"+e1;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= unaryExpr 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					//System.out.println("expression " + u);
					RESULT = u;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression binaryOp expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = "";
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					if(e1.toString().length() >=3) {
						RESULT += e1.toString();
						fstoperand = e1.toString().substring(1,3);
					}
					if(e2.toString().length() >=3) {
						RESULT += e2.toString();
						sndoperand = e2.toString().substring(1,3);
					}
					variable_count++;
					RESULT += "\nt"+variable_count+" = "+fstoperand +""+ o + ""+ sndoperand;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type ::= typeName 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type ::= typeLit 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // typeName ::= IDENTIFIER 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeName",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // typeLit ::= arrayType 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeLit",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // typeLit ::= structType 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeLit",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // typeLit ::= functionType 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeLit",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // typeLit ::= sliceType 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeLit",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sliceType ::= OPEN_SQUARE CLOSE_SQUARE elementType 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sliceType",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arrayType ::= OPEN_SQUARE arrayLength CLOSE_SQUARE elementType 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayType",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arrayLength ::= expression 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayLength",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // elementType ::= type 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementType",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // structType ::= STRUCT OPEN_CURLY fieldDecls CLOSE_CURLY 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structType",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // fieldDecls ::= fieldDecl SEMI_COLON fieldDecls 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDecls",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // fieldDecls ::= 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDecls",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fieldDecl ::= identifierList type 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDecl",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fieldDecl ::= identifierList type tag 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDecl",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // fieldDecl ::= anonymousField 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDecl",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // fieldDecl ::= anonymousField tag 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDecl",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // anonymousField ::= typeName 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("anonymousField",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // anonymousField ::= ASTRISK typeName 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("anonymousField",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tag ::= STRING_LIT 
            {
              Object RESULT =null;
		
			Z +="";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // functionType ::= FUNC signature 
            {
              Object RESULT =null;
			
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionType",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // typeDecl ::= TYPE typeSpec 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // typeDecl ::= TYPE OPEN_PARAN typeSpecs CLOSE_PARAN 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // typeSpecs ::= typeSpec SEMI_COLON typeSpecs 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecs",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // typeSpecs ::= 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecs",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // typeSpec ::= IDENTIFIER type 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpec",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // varDecl ::= VAR varSpec 
            {
              Object RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//RESULT="t"+variable_count+vs + " = " + "t"+variable_count;
				RESULT = vs + "t" + variable_count;
				//variable_count++;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // varDecl ::= VAR OPEN_PARAN varSpecs CLOSE_PARAN 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // varSpecs ::= varSpec SEMI_COLON varSpecs 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpecs",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // varSpecs ::= 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpecs",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // varSpec ::= IDENTIFIER EQUAL expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e + "\n" + i + " = ";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // varSpec ::= IDENTIFIER type 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // varSpec ::= IDENTIFIER type EQUAL expression 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // shortVarDecl ::= identifierList COLON_EQUAL expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = e +"\n"+ i + " = " + e.toString().substring(1,3);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shortVarDecl",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // functionDecl ::= FUNC functionName function 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = "\n"+ f +"\n" +f2;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // functionDecl ::= FUNC functionName signature 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // functionName ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = i+":";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionName",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // methodDecl ::= FUNC receiver methodName function 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // methodDecl ::= FUNC receiver methodName signature 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // receiver ::= parameters 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // methodName ::= IDENTIFIER 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodName",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // unaryExpr ::= primaryExpr 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					//System.out.println("unaryExpr " + p);
					RESULT = p;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // unaryExpr ::= unaryOp unaryExpr 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = o+""+e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // primaryExpr ::= operand 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
					//System.out.println("operand " + o);	
					RESULT = o;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // primaryExpr ::= primaryExpr selector 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

					RESULT = p+""+s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // primaryExpr ::= primaryExpr arguments 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
					
					RESULT = a+"\n"+ p ;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // selector ::= DOT IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arguments ::= OPEN_PARAN CLOSE_PARAN 
            {
              Object RESULT =null;
		
					RESULT ="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // arguments ::= OPEN_PARAN expressionList CLOSE_PARAN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT="\npush_params: "+e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // arguments ::= OPEN_PARAN TYPE type COMMA expressionList CLOSE_PARAN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // methodExpr ::= DOT receiverType DOT methodName 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodExpr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // receiverType ::= OPEN_PARAN ASTRISK typeName CLOSE_PARAN 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiverType",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // receiverType ::= OPEN_PARAN typeName CLOSE_PARAN 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiverType",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operand ::= literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//System.out.println("literal "+l);
				RESULT = l;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operand ::= operandName 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//System.out.println("operandName " + o);
				RESULT = o;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operand ::= methodExpr 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = me;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operand ::= OPEN_PARAN expression CLOSE_PARAN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = e;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // literal ::= basicLit 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				////System.out.println("basicLit: " + b);
				RESULT = b;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // literal ::= functionLit 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = f;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // basicLit ::= INT_LIT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basicLit",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // basicLit ::= STRING_LIT 
            {
              Object RESULT =null;
		int s_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = s_l;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basicLit",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operandName ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandName",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operandName ::= qualifiedIdent 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandName",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // qualifiedIdent ::= DOT packageName DOT IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						variable_count++;
						RESULT = "t"+ variable_count+ "= call "+i + "\n"+"pop_params;";
						
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualifiedIdent",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // functionLit ::= FUNC function 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = f;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionLit",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // function ::= signature functionBody 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // signature ::= parameters 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // signature ::= parameters result 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // result ::= parameters 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // result ::= OPEN_PARAN type CLOSE_PARAN 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // parameters ::= OPEN_PARAN CLOSE_PARAN 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // parameters ::= OPEN_PARAN parameterList CLOSE_PARAN 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // parameterList ::= parameterDecl 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parameterList ::= parameterDecl COMMA parameterList 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parameterDecl ::= identifierList type 
            {
              Object RESULT =null;
		
						Z +="push_params: ";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDecl",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parameterDecl ::= identifierList CDOTS type 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDecl",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // functionBody ::= block 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = b;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionBody",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // block ::= OPEN_CURLY statementList CLOSE_CURLY 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

				RESULT = "beginfunc:"+l+"\nend_func;";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // statementList ::= statement statementList 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = s+"\n"+s1;


					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // statementList ::= 
            {
              Object RESULT =null;
		
						RESULT ="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // packageClause ::= PACKAGE packageName 
            {
              Object RESULT =null;
		
						Z +="";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageClause",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // importDecls ::= importDecl optionalSemiColon importDecls 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // importDecls ::= 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // importDecl ::= IMPORT importSpec 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // importDecl ::= IMPORT OPEN_PARAN importSpecs CLOSE_PARAN 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // importSpecs ::= importSpec optionalSemiColon importSpecs 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpecs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // importSpecs ::= 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpecs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // importSpec ::= importPath 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // importSpec ::= DOT importPath 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // importSpec ::= packageName importPath 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // importPath ::= STRING_LIT 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importPath",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // packageName ::= IDENTIFIER 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageName",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // optionalSemiColon ::= SEMI_COLON 
            {
              Object RESULT =null;
		
							Z +="";
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSemiColon",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // optionalSemiColon ::= 
            {
              Object RESULT =null;
		
							Z +="";
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSemiColon",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // assignOp ::= addOp EQUAL 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // assignOp ::= mulOp EQUAL 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // assignOp ::= EQUAL 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // binaryOp ::= addOp 
            {
              Object RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=ap;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // binaryOp ::= OR_OP 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // binaryOp ::= AND_OP 
            {
              Object RESULT =null;
		
					Z +="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // binaryOp ::= REL_OP 
            {
              Object RESULT =null;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ro = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = ro;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // binaryOp ::= mulOp 
            {
              Object RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = mo;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // addOp ::= PLUS 
            {
              Object RESULT =null;
		
				RESULT="+";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addOp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // addOp ::= MINUS 
            {
              Object RESULT =null;
		
				RESULT="-";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addOp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // addOp ::= BAR 
            {
              Object RESULT =null;
		
				RESULT="|";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addOp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // mulOp ::= ASTRISK 
            {
              Object RESULT =null;
		
				RESULT="*";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // mulOp ::= SLASH 
            {
              Object RESULT =null;
		
				RESULT="/";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // mulOp ::= SHIFT_LEFT 
            {
              Object RESULT =null;
		
				RESULT="<<";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // mulOp ::= SHIFT_RIGHT 
            {
              Object RESULT =null;
		
				RESULT=">>";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // mulOp ::= PERCENT 
            {
              Object RESULT =null;
		
				RESULT="%";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // mulOp ::= AMBERSAND 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // unaryOp ::= PLUS 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // unaryOp ::= MINUS 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // unaryOp ::= EXCLAMATION 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // unaryOp ::= ASTRISK 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // unaryOp ::= AMBERSAND 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // unaryOp ::= LESS_DASH 
            {
              Object RESULT =null;
		
				Z +="";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
