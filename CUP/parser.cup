import java.io.*;
import java.util.PriorityQueue;

parser code {:
	String Z = "";
	 int variable_count = -1;
 	 int label_count = -1;
 	 PriorityQueue<String> operandQueue = new PriorityQueue<String>();
:}

/* Terminals (tokens returned by the scanner). */
terminal			BREAK, DEFAULT, FUNC, CASE, ELSE, PACKAGE, SWITCH, CONST, IF, 
					TYPE, FOR, IMPORT, RETURN, VAR, OR_OP, AND_OP, PLUS, MINUS, OPEN_PARAN, 
					CLOSE_PARAN, OPEN_CURLY, CLOSE_CURLY, 
					SEMI_COLON, COMMA, DOT, COLON, COLON_EQUAL, EQUAL, CDOTS, ASTRISK, 
					SHIFT_LEFT, SHIFT_RIGHT, SLASH, EXCLAMATION, AMBERSAND,
					PERCENT, INCREMENT, DECREMENT;
terminal	String	IDENTIFIER, REL_OP, STRING_LIT;	
terminal	String	INT_LIT;

/* Non-terminals */
nonterminal	sourceFile, packageClause, importDecls, importDecl, topLevelDecls,
					topLevelDecl, packageName, importSpecs, importSpec, importPath, 
					optionalSemiColon, declaration, functionDecl, methodDecl, 
					constDecl, varDecl, constSpecs, constSpec, identifierList, 
					expressionList, expression, primaryExpr, 
					unaryExpr, operand, selector, 
					arguments, literal, operandName, methodExpr, basicLit, functionLit, 
					qualifiedIdent, function, signature, functionBody, parameters, result, 
					type, parameterList, parameterDecl, block, statementList, statement, 
					typeName, typeLit, functionType, varSpecs, varSpec, shortVarDecl, functionName, 
					methodName, receiver, receiverType, simpleStmt, returnStmt, breakStmt, 
					ifStmt, switchStmt, forStmt, expressionStmt, incDecStmt, assignment, 
					assignOp, exprSwitchStmt, initStmt, postStmt, condition, forClause, 
					exprCaseClauses, exprCaseClause, exprSwitchCase;

precedence left OR_OP, AND_OP;
precedence left REL_OP;
precedence left PLUS, MINUS;
precedence left ASTRISK, SLASH, SHIFT_LEFT, SHIFT_RIGHT, PERCENT, AMBERSAND;
precedence left EXCLAMATION;
precedence left OPEN_PARAN, CLOSE_PARAN;
precedence left COMMA, SEMI_COLON;
precedence left COLON;

start with sourceFile;
/* The grammar */
sourceFile	::=	packageClause optionalSemiColon importDecls topLevelDecls:d
				{:
					String res = d.toString();
					if(res.charAt(0) == '\n') {
						res = res.substring(1);
					}
					RESULT = res.replace("\n\n", "\n");
				:}
				| packageClause optionalSemiColon importDecls:d
				{:
					String res = d.toString();
					if(res.charAt(0) == '\n') {
						res = res.substring(1);
					}
					RESULT = res.replace("\n\n", "\n");
				:};
				
optionalSemiColon	::=	SEMI_COLON
						{:
							Z +="";
						:}
						| 
						{:
							Z +="";
						:};
										
type	::= typeName
			{:
				Z +="";
			:}
			| typeLit
			{:
				Z +="";
			:};

typeName	::=	IDENTIFIER
				{:
					Z +="";
				:};
				
typeLit	::=functionType
			{:
				Z +="";
			:};
	
functionType ::= FUNC signature
				{:	
					Z +="";
				:};
				
signature	::=	parameters
				{:
					Z +="";
				:}
				| parameters result
				{:
					Z +="";
				:};

result	::=	parameters
			{:
				Z +="";
			:}
			| OPEN_PARAN type CLOSE_PARAN
			{:
				Z +="";
			:};
			
parameters	::=	OPEN_PARAN CLOSE_PARAN
				{:
					Z +="";
				:}
				| OPEN_PARAN parameterList CLOSE_PARAN
				{:
					Z +="";
				:}; 

parameterList	::=	parameterDecl
					{:
						Z +="";
					:}
					| parameterDecl COMMA parameterList
					{:
						Z +="";
					:};
					
parameterDecl	::= identifierList type
					{:
						Z +="push_params: ";
					:}
					| identifierList CDOTS type
					{:
						Z +="";
					:};	
				
methodName	::=	IDENTIFIER
				{:
					Z +="";
				:};
				
block	::= OPEN_CURLY statementList:l CLOSE_CURLY
			{:
				
				RESULT = l;
			:};
			
statementList	::=	statement:s statementList:s1
					{:
						RESULT = s+"\n"+s1;
					:}
					| 
					{:
						RESULT ="";
					:};
declaration	::=	constDecl:d SEMI_COLON:sc
				{:
					RESULT = d;
				:}
				| varDecl:vd SEMI_COLON:sc
				{:
					RESULT = vd;
				:};		
			
topLevelDecls	::=	topLevelDecl:d1 topLevelDecls:d2
					{:
						RESULT = d1+""+d2;
					:}
					| topLevelDecl:d
					{:
						RESULT = d;
					:};	
					
topLevelDecl ::=	declaration:d 
					{:
						RESULT = d;
					:}
					| functionDecl:fd optionalSemiColon:osc
					{:
						RESULT = fd;
					:}
					| methodDecl:md optionalSemiColon:osc
					{:
						RESULT = md;
					:};	
					
constDecl	::=	CONST constSpec:c
				{:
					RESULT = c;
				:}
				| CONST OPEN_PARAN constSpecs CLOSE_PARAN
				{:
					Z +="";
				:}
				| CONST OPEN_PARAN CLOSE_PARAN
				{:
					Z +="";
				:};
				
constSpecs	::=	constSpec SEMI_COLON constSpecs
				{:
					Z +="";
				:}
				| constSpec SEMI_COLON
				{:
					Z +="";
				:};
				
constSpec	::=	IDENTIFIER:i
				{:
					RESULT = i;
				:}
				| IDENTIFIER:i EQUAL expression:e
				{:
					RESULT = i +" =" +e;
				:}
				| IDENTIFIER:i type EQUAL expression:e
				{:
					RESULT = i+" ="+e;
				:};

identifierList	::=	IDENTIFIER:i
					{:
						RESULT = i;
					:}
					| IDENTIFIER:i COMMA identifierList:i1
					{:
						RESULT = i + "," + i1;
					:};		
					
expressionList	::=	expression:e
					{:
						////System.out.println("expr_l " + e);
						operandQueue = new PriorityQueue<String>();
						RESULT = e;
					:}
					| expression:e COMMA expressionList:e1
					{:
						RESULT = e+"\n"+e1;
					:};


expression	::=	unaryExpr:u
				{:
					RESULT = u;
				:}
				| expression:e1 REL_OP:o expression:e2
				{:
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + ""+o+""+ sndoperand;
				:}
				|expression:e1 OR_OP:o expression:e2
				{:
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				:}
				|expression:e1 AND_OP:o expression:e2
				{:
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(temp.charAt(lstIdxEq -1) != '=') {
							foundEq = true;
							break;
						}
						temp = temp.substring(0, lstIdxEq-1);
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				:}
				|expression:e1 PLUS:o expression:e2
				{:
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				:}
				|expression:e1 MINUS:o expression:e2
				{:
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				:}
				| expression:e1 ASTRISK:o expression:e2
				{:
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				:}
				| expression:e1 SLASH:o expression:e2
				{:
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				:}
				|expression:e1 PERCENT:o expression:e2
				{:
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				:}
				|expression:e1 SHIFT_LEFT:o expression:e2
				{:
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				:}
				|expression:e1 SHIFT_RIGHT:o expression:e2
				{:
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				:}
				|expression:e1 AMBERSAND:o expression:e2
				{:
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				:}
				|expression:e1 EXCLAMATION:o expression:e2
				{:
					String fstoperand = e1.toString();
					String sndoperand = e2.toString();
					String firstPart = "";
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int fstCutsnd = 0;
					int scndCutsnd = e2.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(e1.toString().charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
						firstPart += e1+"";
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					lstIdxEq = 0;
					foundEq = false;
					temp = e2.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutsnd = lstIdxEq;
						firstPart += e2+"";
					}
					terminalIndex = e2.toString().substring(0, scndCutsnd).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e2.toString().substring(0, scndCutsnd).length() 
					&& Character.isDigit(e2.toString().charAt(terminalIndex+1))) {
						fstCutsnd = terminalIndex;
					}
					sndoperand = e2.toString().substring(fstCutsnd, scndCutsnd);
					fstoperand = fstoperand.replace("\n","").replace("\r","");
					sndoperand = sndoperand.replace("\n","").replace("\r","");
					RESULT = firstPart + "\nt" + ++variable_count + " =" + fstoperand + "" + o +""+ sndoperand;
				:};
		
unaryExpr	::=	primaryExpr:p
				{:
					//System.out.println("unaryExpr " + p);
					RESULT = p;
				:}
				| MINUS:o unaryExpr:e
				{:
					RESULT = o+""+e;
				:}
				| EXCLAMATION:o unaryExpr:e
				{:
					RESULT = o+""+e;
				:}
				| ASTRISK:o unaryExpr:e
				{:
					RESULT = o+""+e;
				:};	
			
varDecl	::=	VAR varSpec:vs 
			{:
				RESULT = vs + "t" + variable_count;
			:}
			| VAR OPEN_PARAN varSpecs CLOSE_PARAN
			{:
				Z +="";
			:};				

varSpecs	::= varSpec:v SEMI_COLON varSpecs
				{:
					RESULT = v;
				:}
				| 
				{:
					RESULT="";
				:};
				
varSpec	::= IDENTIFIER:i EQUAL expression:e
			{:
				RESULT = e + "\n" + i + " =";
			:}
			| IDENTIFIER:i type:t
			{:
				RESULT = i+""+t;
			:}
			| IDENTIFIER:i type:t EQUAL expression:e
			{:
				RESULT = i+""+t+""+e;
			:};
		
shortVarDecl	::= identifierList:i COLON_EQUAL expression:e1
					{:	
				String fstoperand = e1.toString();
				int fstCutfst = 0;
				int scndCutfst = e1.toString().length();
				int lstIdxEq = 0;
				boolean foundEq = false;
				String temp = e1.toString();
				while(lstIdxEq > -1) {
					lstIdxEq = temp.indexOf('=');
					if(lstIdxEq != -1) {
						if(temp.charAt(lstIdxEq +1) != '=') {
							foundEq = true;
							break;
						}
					
						temp = temp.substring(0, lstIdxEq+1);
					}
				}
				if(foundEq) {
					scndCutfst = lstIdxEq;
				}
				int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
				if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
				}  
				fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
						if(e1.toString().length() >=3) {
							RESULT = e1 +"\n"+ i + " =" + fstoperand;
						}else {
							RESULT = i + " =" + e1;
						 //  System.out.println("RESULT2: "+e1);
						}
					:};
	
functionDecl	::= FUNC functionName:f function:f2
					{:
						//System.out.println("functionDecl " + f.toString() +"*********"+ f2.toString());
						RESULT = "\n"+ f +"\n" +f2;
					:}
					| FUNC functionName:f signature
					{:
						RESULT = f;
					:};

functionName	::= IDENTIFIER:i
					{:
						RESULT = i+":";
					:};

function	::=	signature functionBody:b
				{:
					
					RESULT = "begin_func;\n"+b+"\nend_func;";
				:};

functionBody	::= block:b
					{:
						//System.out.println("FUNCTION: " + b.toString());
						RESULT = b;
					:};

methodDecl	::= FUNC receiver methodName function
				{:
					Z +="";
				:}
				| FUNC receiver methodName signature
				{:
					Z +="";
				:};
				
receiver	::= parameters
				{:
					Z +="";
				:};

operand	::=	literal:l
			{:
				//System.out.println("literal "+l);
				RESULT = l;
			:}
			| operandName:o
			{:
				//System.out.println("operandName " + o);
				RESULT = o;
			:}
			| methodExpr:me
			{:
				RESULT = me;
			:}
			| OPEN_PARAN expression:e CLOSE_PARAN
			{:
				RESULT = e;
			:};

literal	::=	basicLit:b
			{:
				////System.out.println("basicLit: " + b);
				RESULT = b;
			:}
			| functionLit:f
			{:
				RESULT = f;
			:};

basicLit	::=	INT_LIT:i
				{:
					RESULT = i;
				:}
				| STRING_LIT:s_l 
				{:
					RESULT = s_l;
				:};

operandName	::=	IDENTIFIER:i
				{:
					RESULT = i;
				:}
				| qualifiedIdent:i
				{:
					RESULT = i;
				:};

qualifiedIdent	::=	DOT packageName DOT IDENTIFIER:i
					{:
						variable_count++;
						RESULT = "t"+ variable_count+ "= call "+i + "\n"+"pop_params;";
					:};

functionLit	::=	FUNC function:f
				{:
					RESULT = f;
				:};

primaryExpr	::=	operand:o
				{:		
					//System.out.println("operand " + o);	
					RESULT = o;
				:}
				| primaryExpr:p selector:s
				{:	
					RESULT = p+""+s;
				:}
				| primaryExpr:p arguments:a
				{:			
					String args = a.toString();
					if(args.charAt(0) == '\n') {
						args = args.substring(1);
					}
					if(p.toString().contains("call")) {
						RESULT =  args+"\n" + p;
					} else {
						RESULT =  args+"\nt" + ++variable_count + " = call " +p + "\npop_params;";
					}
				:};

selector	::= DOT IDENTIFIER:i
				{:
					RESULT = i;
				:};

arguments	::=	OPEN_PARAN CLOSE_PARAN
				{:
					RESULT ="";
				:}
				| OPEN_PARAN expressionList:e CLOSE_PARAN
				{:
					String el = e.toString().replace("\n", "\npush_params: ");
					RESULT="\npush_params: "+el;
				:}
				| OPEN_PARAN TYPE type COMMA expressionList:e CLOSE_PARAN
				{:
					RESULT = e;
				:};

methodExpr	::=	DOT receiverType DOT methodName
				{:
					Z +="";
				:};


receiverType	::=	OPEN_PARAN ASTRISK typeName CLOSE_PARAN
					{:
						Z +="";
					:}
					| OPEN_PARAN typeName CLOSE_PARAN
					{:
						Z +="";
					:};
					
statement	::=	declaration:d
				{:						
					RESULT = d;
				:}
				| simpleStmt:d SEMI_COLON
				{:	
					RESULT = d;
				:}
				| returnStmt:d SEMI_COLON
				{:
					
					RESULT = d;
				:}
				| breakStmt SEMI_COLON
				{:
					
					RESULT ="";
				:}
				| block:b optionalSemiColon
				{:
					
					RESULT = b;
				:}
				| ifStmt:is optionalSemiColon
				{:
					RESULT = is;
				:}
				| switchStmt optionalSemiColon
				{:
					//System.out.println("STATEMENT: " + is.toString());
					Z +="";
				:}
				| forStmt:f optionalSemiColon
				{:
					RESULT = f;
				:};

simpleStmt	::= expressionStmt:a
				{:
					RESULT = a;
				:}
				| incDecStmt:a
				{:
					RESULT = a;
				:}
				| assignment:a
				{:
					RESULT = a;
				:}
				| shortVarDecl:a
				{:
					RESULT = a;
				:};


expressionStmt	::= expression:e
					{:
						RESULT = e;
					:};

incDecStmt	::= expression:e INCREMENT
				{:
						RESULT = e;
				:}
				| expression:e DECREMENT
				{:
						RESULT = e;
				:};

assignment	::=	expressionList:e assignOp:o expressionList:e1
				{:
					String fstoperand = e1.toString();
					int fstCutfst = 0;
					int scndCutfst = e1.toString().length();
					int lstIdxEq = 0;
					boolean foundEq = false;
					String temp = e1.toString();
					while(lstIdxEq > -1) {
						lstIdxEq = temp.lastIndexOf('=');
						if(lstIdxEq != -1) {
							if(temp.charAt(lstIdxEq -1) != '=') {
								foundEq = true;
								break;
							}
						
							temp = temp.substring(0, lstIdxEq-1);
						}
					}
					if(foundEq) {
						scndCutfst = lstIdxEq;
					}
					int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
					if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
						&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
							fstCutfst = terminalIndex;
					}
					fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
					//System.out.println("ASSIGNMENT: " + e1.toString() + " OP " + fstoperand);
					RESULT = e1 + "\n"+e+""+o +""+fstoperand;
					//Z +="";
				:};

assignOp	::=	PLUS EQUAL
				{:
					RESULT = "+=";
				:}
				| MINUS EQUAL
				{:
					RESULT = "-=";
				:}
				| ASTRISK EQUAL
				{:
					RESULT = "*=";
				:}
				| SLASH EQUAL
				{:
					RESULT = "/=";
				:}
				| SHIFT_LEFT EQUAL
				{:
					RESULT = "<<=";
				:}
				| SHIFT_RIGHT EQUAL
				{:
					RESULT = ">>=";
				:}| EQUAL
				{:
					RESULT = "=";
				:};


ifStmt	::=	IF expression:e block:b
			{:
				++label_count;
				RESULT =  e + "\nIf t" + (variable_count-1) + " Goto L"+label_count+"\nGoto L" 
							+ ++label_count + "\nL" + (label_count-1)+":\n"+b + "\nL"+label_count+":";
			:}
			| IF simpleStmt:s SEMI_COLON expression:e block:b
			{:
				RESULT =  s + "" + e + "" + b;
			:}
			| IF expression:e block:b ELSE ifStmt:fs
			{:  
				++label_count;
				RESULT = e + "\nIf t" + (variable_count-2) 
						+ " Goto L"+label_count+"\nGoto L" 
						+ ++label_count + "\nL" + (label_count-1)+":\n"+b + "\nGoto LL" +  (label_count-1)
						+ "\nL"+label_count+":"
						+"\n"+fs + "\nLL" +  (label_count-1)+":";
			:}
			| IF expression:e block:b1 ELSE block:b2
			{:
				++label_count;
				RESULT = e + "\nIf t" + (variable_count-2) 
						+ " Goto L"+label_count+"\nGoto L" 
						+ ++label_count + "\nL" + (label_count-1)+":\n"+b1 + "\nGoto LL" +  (label_count-1)
						+ "\nL"+label_count+":"
						+"\n"+b2 + "\nLL" +  (label_count-1)+":";
												//System.out.println("IF "+ RESULT);

			:}
			| IF simpleStmt:e SEMI_COLON expression:e1 block:b ELSE ifStmt:fs
			{: 						

				String fstoperand = e1.toString();
				int fstCutfst = 0;
				int scndCutfst = e1.toString().length();
				int lstIdxEq = 0;
				boolean foundEq = false;
				String temp = e1.toString();
				while(lstIdxEq > -1) {
					lstIdxEq = temp.lastIndexOf('=');
					if(lstIdxEq != -1) {
						if(temp.charAt(lstIdxEq -1) != '=') {
							foundEq = true;
							break;
						}
					
						temp = temp.substring(0, lstIdxEq-1);
					}
				}
				if(foundEq) {
					scndCutfst = lstIdxEq;
				}
				int terminalIndex = e1.toString().substring(0, scndCutfst).lastIndexOf('t');
				if(terminalIndex > -1 && terminalIndex < e1.toString().substring(0, scndCutfst).length() 
					&& Character.isDigit(e1.toString().charAt(terminalIndex+1))) {
						fstCutfst = terminalIndex;
				}
				fstoperand = e1.toString().substring(fstCutfst, scndCutfst);
				++label_count;
				RESULT = e + "\n" + e1 + "\nIf "+ fstoperand 
						+ " Goto L"+label_count+"\nGoto L" 
						+ ++label_count + "\nL" + (label_count-1)+":\n"+b + "\nGoto LL" +  (label_count-1)
						+ "\nL"+label_count+":"
						+"\n"+fs + "\nLL" +  (label_count-1)+":";
			:}
			| IF simpleStmt:s SEMI_COLON expression block ELSE block
			{: 
				RESULT= s;			
			:};

switchStmt	::=	exprSwitchStmt
				{:
					Z +="";
				:};

exprSwitchStmt	::= SWITCH OPEN_CURLY exprCaseClauses CLOSE_CURLY
					{:
						Z +="";
					:}
					| SWITCH  simpleStmt:s SEMI_COLON OPEN_CURLY exprCaseClauses CLOSE_CURLY
					{:
						RESULT = s;
					:}
					| SWITCH expression OPEN_CURLY exprCaseClauses CLOSE_CURLY
					{:
						Z +="";
					:}
					| SWITCH simpleStmt:s SEMI_COLON expression OPEN_CURLY exprCaseClauses CLOSE_CURLY
					{:
						RESULT = s;
					:};


exprCaseClauses	::=	exprCaseClause exprCaseClauses
					{:
						Z +="";
					:}
					| 
					{:
						Z +="";
					:};

exprCaseClause	::= exprSwitchCase COLON statementList
					{:
						Z +="";
					:};

exprSwitchCase	::=	CASE expression
					{:
						Z +="";
					:}
					| DEFAULT
					{:
						Z +="";
					:};

forStmt	::=	 FOR forClause:f block:b
			{:
				RESULT= f+" ::::: "+b;
			:};

forClause	::=	initStmt:i SEMI_COLON condition:c SEMI_COLON postStmt:p
				{:
				RESULT= i+" ::::: "+c+" ::::: "+p;
				:};

condition	::=	expression:e
				{:
				RESULT = e;
				:};

initStmt	::=	simpleStmt:s
				{:
					RESULT = s;
				:};

postStmt	::=	simpleStmt:s
				{:
					RESULT = s;
				:};

returnStmt	::=	RETURN:r
				{:
					RESULT = r;
				:}
				| RETURN:r expressionList:el
				{:
					String elist = el.toString().replace("\n", ",");
					RESULT = r+" "+elist;
				:};

breakStmt	::=	BREAK
				{:
					Z +="";
				:};

packageClause	::=	PACKAGE packageName
					{:
						Z +="";
					:};

packageName	::=	IDENTIFIER
				{:
					Z +="";
				:};

importDecls	::=	importDecl optionalSemiColon importDecls
				{:
					Z +="";
				:}
				|
				{:
					Z +="";
				:};

importDecl	::=	IMPORT	importSpec
				{:
					Z +="";
				:}
				| IMPORT OPEN_PARAN importSpecs CLOSE_PARAN
				{:
					Z +="";
				:};

importSpecs	::=	importSpec optionalSemiColon importSpecs
				{:
					Z +="";
				:}
				| 
				{:
					Z +="";
				:};

importSpec	::=	importPath
				{:
					Z +="";
				:}
				| DOT importPath
				{:
					Z +="";
				:}
				| packageName importPath
				{:
					Z +="";
				:};

importPath	::=	STRING_LIT
				{:
					Z +="";
				:};
	